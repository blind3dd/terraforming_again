#cloud-config

# Tailscale Subnet Router Setup
# This configures a Tailscale subnet router for AWS VPC

package_update: true
package_upgrade: true

packages:
  - curl
  - wget
  - jq
  - iptables-persistent

# Install Tailscale
runcmd:
  # Install Tailscale
  - curl -fsSL https://tailscale.com/install.sh | sh
  
  # Configure Tailscale as subnet router
  - tailscale up --authkey=${tailscale_auth_key} --advertise-routes=${subnet_routes} --accept-routes --hostname=${environment}-${service_name}-subnet-router
  
  # Enable IP forwarding
  - echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
  - echo 'net.ipv6.conf.all.forwarding = 1' >> /etc/sysctl.conf
  - sysctl -p
  
  # Configure iptables for subnet routing
  - iptables -t nat -A POSTROUTING -o tailscale0 -j MASQUERADE
  - iptables -A FORWARD -i tailscale0 -j ACCEPT
  - iptables -A FORWARD -o tailscale0 -j ACCEPT
  
  # Save iptables rules
  - iptables-save > /etc/iptables/rules.v4
  
  # Start Tailscale service
  - systemctl enable tailscaled
  - systemctl start tailscaled
  
  # Log Tailscale status
  - tailscale status > /var/log/tailscale-status.log
  - tailscale ip -4 >> /var/log/tailscale-status.log

# Create systemd service for persistent routing
write_files:
  - path: /etc/systemd/system/tailscale-subnet-router.service
    content: |
      [Unit]
      Description=Tailscale Subnet Router
      After=tailscaled.service
      Requires=tailscaled.service
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/bash -c 'iptables -t nat -A POSTROUTING -o tailscale0 -j MASQUERADE && iptables -A FORWARD -i tailscale0 -j ACCEPT && iptables -A FORWARD -o tailscale0 -j ACCEPT'
      ExecStop=/bin/bash -c 'iptables -t nat -D POSTROUTING -o tailscale0 -j MASQUERADE && iptables -D FORWARD -i tailscale0 -j ACCEPT && iptables -D FORWARD -o tailscale0 -j ACCEPT'
      
      [Install]
      WantedBy=multi-user.target
    permissions: '0644'

# Enable the service
runcmd:
  - systemctl daemon-reload
  - systemctl enable tailscale-subnet-router.service
  - systemctl start tailscale-subnet-router.service

# Logging configuration
write_files:
  - path: /etc/rsyslog.d/50-tailscale.conf
    content: |
      # Tailscale logging
      :programname, isequal, "tailscaled" /var/log/tailscale.log
      & stop
    permissions: '0644'

# Restart rsyslog to apply new config
runcmd:
  - systemctl restart rsyslog

# Create monitoring script
write_files:
  - path: /usr/local/bin/tailscale-monitor.sh
    content: |
      #!/bin/bash
      # Tailscale monitoring script
      
      LOG_FILE="/var/log/tailscale-monitor.log"
      
      echo "$(date): Checking Tailscale status" >> $LOG_FILE
      
      # Check if Tailscale is running
      if ! systemctl is-active --quiet tailscaled; then
          echo "$(date): ERROR - Tailscaled is not running" >> $LOG_FILE
          systemctl restart tailscaled
      fi
      
      # Check subnet routes
      ROUTES=$(tailscale status --json | jq -r '.Peer[] | select(.HostName | contains("subnet-router")) | .TailscaleIPs[]')
      if [ -z "$ROUTES" ]; then
          echo "$(date): WARNING - No subnet routes found" >> $LOG_FILE
      else
          echo "$(date): Subnet routes: $ROUTES" >> $LOG_FILE
      fi
      
      # Check connectivity to Azure jumphost
      if ping -c 1 100.64.0.1 > /dev/null 2>&1; then
          echo "$(date): Azure jumphost connectivity: OK" >> $LOG_FILE
      else
          echo "$(date): WARNING - Cannot reach Azure jumphost" >> $LOG_FILE
      fi
    permissions: '0755'

# Set up monitoring cron job
runcmd:
  - echo "*/5 * * * * /usr/local/bin/tailscale-monitor.sh" >> /etc/crontab

# Final status check
runcmd:
  - echo "Tailscale subnet router setup complete" > /var/log/tailscale-setup.log
  - tailscale status >> /var/log/tailscale-setup.log
  - echo "Subnet routes: ${subnet_routes}" >> /var/log/tailscale-setup.log
