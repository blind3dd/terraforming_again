---
- name: Windows Security Hardening
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Windows security configuration
    enable_windows_defender: true
    enable_firewall: true
    enable_audit_logging: true
    enable_bitlocker: false  # Requires TPM
    enable_windows_update: true
    enable_credential_guard: true
    enable_device_guard: true

    # Security policies
    password_policy:
      min_length: 14
      complexity: true
      history: 24
      max_age: 90
      min_age: 1

    # Audit policies
    audit_policies:
      - name: "Audit Account Logon"
        value: "Success and Failure"
      - name: "Audit Account Management"
        value: "Success and Failure"
      - name: "Audit Directory Service Access"
        value: "Success and Failure"
      - name: "Audit Logon Events"
        value: "Success and Failure"
      - name: "Audit Object Access"
        value: "Success and Failure"
      - name: "Audit Policy Change"
        value: "Success and Failure"
      - name: "Audit Privilege Use"
        value: "Success and Failure"
      - name: "Audit System Events"
        value: "Success and Failure"

  tasks:
    - name: Check if running on Windows
      win_fail:
        msg: "This playbook must be run on a Windows system"
      when: ansible_os_family != "Windows"

    - name: Display Windows security hardening information
      win_debug:
        msg: |
          ========================================
          Windows Security Hardening Setup
          ========================================
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          ========================================
          This playbook will configure:
          - Windows Defender settings
          - Windows Firewall rules
          - Audit logging policies
          - Password policies
          - Security baselines
          ========================================

    - name: Enable Windows Defender
      block:
        - name: Enable Windows Defender real-time protection
          win_shell: |
            Set-MpPreference -DisableRealtimeMonitoring $false
            Set-MpPreference -DisableBehaviorMonitoring $false
            Set-MpPreference -DisableBlockAtFirstSeen $false
            Set-MpPreference -DisableIOAVProtection $false
            Set-MpPreference -DisablePrivacyMode $false
            Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $false
          when: enable_windows_defender

        - name: Configure Windows Defender exclusions
          win_shell: |
            Add-MpPreference -ExclusionPath "C:\Program Files\Docker"
            Add-MpPreference -ExclusionPath "C:\ProgramData\Docker"
            Add-MpPreference -ExclusionProcess "docker.exe"
            Add-MpPreference -ExclusionProcess "dockerd.exe"
          when: enable_windows_defender

        - name: Update Windows Defender signatures
          win_shell: |
            Update-MpSignature
          when: enable_windows_defender

    - name: Configure Windows Firewall
      block:
        - name: Enable Windows Firewall
          win_shell: |
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
          when: enable_firewall

        - name: Configure default firewall rules
          win_shell: |
            # Block inbound connections by default
            Set-NetFirewallProfile -Profile Domain,Public,Private -DefaultInboundAction Block
            # Allow outbound connections by default
            Set-NetFirewallProfile -Profile Domain,Public,Private -DefaultOutboundAction Allow
            # Log dropped packets
            Set-NetFirewallProfile -Profile Domain,Public,Private -LogAllowed True
            Set-NetFirewallProfile -Profile Domain,Public,Private -LogBlocked True
            Set-NetFirewallProfile -Profile Domain,Public,Private -LogMaxSize 4096
          when: enable_firewall

        - name: Create custom firewall rules for development
          win_shell: |
            # Allow SSH (if OpenSSH is installed)
            New-NetFirewallRule -DisplayName "SSH" -Direction Inbound -Protocol TCP -LocalPort 22 -Action Allow -Profile Any
            # Allow RDP (for remote administration)
            New-NetFirewallRule -DisplayName "RDP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Domain
            # Allow HTTP/HTTPS for development
            New-NetFirewallRule -DisplayName "HTTP" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow -Profile Any
            New-NetFirewallRule -DisplayName "HTTPS" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow -Profile Any
          when: enable_firewall

    - name: Configure Audit Logging
      block:
        - name: Enable audit logging
          win_shell: |
            auditpol /set /category:"Account Logon" /success:enable /failure:enable
            auditpol /set /category:"Account Management" /success:enable /failure:enable
            auditpol /set /category:"Directory Service Access" /success:enable /failure:enable
            auditpol /set /category:"Logon/Logoff" /success:enable /failure:enable
            auditpol /set /category:"Object Access" /success:enable /failure:enable
            auditpol /set /category:"Policy Change" /success:enable /failure:enable
            auditpol /set /category:"Privilege Use" /success:enable /failure:enable
            auditpol /set /category:"System" /success:enable /failure:enable
          when: enable_audit_logging

        - name: Configure event log settings
          win_shell: |
            # Increase security log size
            wevtutil sl Security /ms:104857600
            # Increase system log size
            wevtutil sl System /ms:104857600
            # Increase application log size
            wevtutil sl Application /ms:104857600
          when: enable_audit_logging

    - name: Configure Password Policy
      block:
        - name: Set password policy via Group Policy
          win_shell: |
            # Set password complexity requirements
            secedit /configure /cfg C:\temp\password_policy.inf
          vars:
            password_policy_content: |
              [System Access]
              MinimumPasswordAge = {{ password_policy.min_age }}
              MaximumPasswordAge = {{ password_policy.max_age }}
              MinimumPasswordLength = {{ password_policy.min_length }}
              PasswordComplexity = {{ 1 if password_policy.complexity else 0 }}
              PasswordHistorySize = {{ password_policy.history }}
              LockoutBadCount = 5
              LockoutDuration = 30
              ResetLockoutCount = 30
              RequireLogonToChangePassword = 0
              ForceLogoffWhenHourExpire = 0
              NewAdministratorName = "Administrator"
              NewGuestName = "Guest"
              ClearTextPassword = 0
              LSAAnonymousNameLookup = 0
              EnableGuestAccount = 0
              EnableAdminAccount = 1
          when: password_policy is defined

        - name: Create password policy configuration file
          win_copy:
            content: "{{ password_policy_content }}"
            dest: C:\temp\password_policy.inf
          when: password_policy is defined

        - name: Apply password policy
          win_shell: |
            secedit /configure /cfg C:\temp\password_policy.inf /db C:\temp\password_policy.sdb /log C:\temp\password_policy.log
          when: password_policy is defined

        - name: Clean up temporary files
          win_file:
            path: C:\temp\password_policy.inf
            state: absent
          when: password_policy is defined

    - name: Configure Windows Update
      block:
        - name: Enable Windows Update
          win_shell: |
            # Configure Windows Update to automatically download and install updates
            $UpdateSession = New-Object -ComObject Microsoft.Update.Session
            $UpdateSession.ClientApplicationID = "Windows Security Hardening"

            # Set registry values for automatic updates
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Value 0
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Value 4
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "ScheduledInstallDay" -Value 0
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "ScheduledInstallTime" -Value 3
          when: enable_windows_update

        - name: Check for Windows Updates
          win_shell: |
            $UpdateSession = New-Object -ComObject Microsoft.Update.Session
            $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()
            $SearchResult = $UpdateSearcher.Search("IsInstalled=0")
            Write-Host "Found $($SearchResult.Updates.Count) updates available"
          when: enable_windows_update

    - name: Configure Credential Guard
      block:
        - name: Enable Credential Guard
          win_shell: |
            # Enable Credential Guard via Group Policy
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "LsaCfgFlags" -Value 1
            # Enable Virtualization Based Security
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "EnableVirtualizationBasedSecurity" -Value 1
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "RequirePlatformSecurityFeatures" -Value 1
          when: enable_credential_guard

    - name: Configure Device Guard
      block:
        - name: Enable Device Guard
          win_shell: |
            # Enable Device Guard
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "EnableVirtualizationBasedSecurity" -Value 1
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "Locked" -Value 0
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "RequirePlatformSecurityFeatures" -Value 1
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -Name "VirtualizationBasedSecurityStatus" -Value 1
          when: enable_device_guard

    - name: Configure BitLocker
      block:
        - name: Check if BitLocker is available
          win_shell: |
            $BitLocker = Get-WmiObject -Namespace "Root\cimv2\security\microsoftvolumeencryption" -Class "Win32_EncryptableVolume" -ErrorAction SilentlyContinue
            if ($BitLocker) {
              Write-Host "BitLocker is available"
              exit 0
            } else {
              Write-Host "BitLocker is not available"
              exit 1
            }
  register: bitlocker_check
          when: enable_bitlocker

        - name: Enable BitLocker
          win_shell: |
            # Enable BitLocker on system drive
            $BitLocker = Get-WmiObject -Namespace "Root\cimv2\security\microsoftvolumeencryption" -Class "Win32_EncryptableVolume" | Where-Object {$_.DriveLetter -eq "C:"}
            if ($BitLocker.ProtectionStatus -eq 0) {
              $BitLocker.EnableKeyProtectors()
              $BitLocker.Encrypt()
            }
          when: enable_bitlocker and bitlocker_check.rc == 0

    - name: Configure Additional Security Settings
      block:
        - name: Disable unnecessary services
          win_shell: |
            # Disable unnecessary services for security
            $ServicesToDisable = @(
              "Fax",
              "Telnet",
              "SNMP",
              "SNMP Trap",
              "World Wide Web Publishing Service",
              "IIS Admin Service",
              "Print Spooler"
            )

            foreach ($Service in $ServicesToDisable) {
              $ServiceObj = Get-Service -Name $Service -ErrorAction SilentlyContinue
              if ($ServiceObj) {
                Set-Service -Name $Service -StartupType Disabled
                Write-Host "Disabled service: $Service"
              }
            }

        - name: Configure registry security settings
          win_shell: |
            # Disable AutoRun for all drives
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "NoDriveTypeAutoRun" -Value 255

            # Disable Windows Script Host
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows Script Host\Settings" -Name "Enabled" -Value 0

            # Disable LM hash storage
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "NoLMHash" -Value 1

            # Require Ctrl+Alt+Del for logon
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "DisableCAD" -Value 0

        - name: Configure network security
          win_shell: |
            # Disable NetBIOS over TCP/IP
            Get-NetAdapter | ForEach-Object {
              $Adapter = $_
              $NetAdapterBinding = Get-NetAdapterBinding -Name $Adapter.Name -ComponentID "ms_tcpip_nb"
              if ($NetAdapterBinding) {
                Disable-NetAdapterBinding -Name $Adapter.Name -ComponentID "ms_tcpip_nb"
              }
            }

            # Disable LLMNR
            Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient" -Name "EnableMulticast" -Value 0

    - name: Final verification
      block:
        - name: Check Windows Defender status
          win_shell: |
            Get-MpComputerStatus | Select-Object AntivirusEnabled, RealTimeProtectionEnabled, OnAccessProtectionEnabled
          when: enable_windows_defender

        - name: Check Windows Firewall status
          win_shell: |
            Get-NetFirewallProfile | Select-Object Name, Enabled
          when: enable_firewall

        - name: Check audit policy status
          win_shell: |
            auditpol /get /category:"Account Logon"
            auditpol /get /category:"Account Management"
            auditpol /get /category:"Logon/Logoff"
          when: enable_audit_logging

        - name: Check password policy
          win_shell: |
            net accounts
          when: password_policy is defined

    - name: Display completion message
      win_debug:
        msg: |
          ========================================
          Windows Security Hardening Complete!
          ========================================
          Defender: {{ 'Enabled' if enable_windows_defender else 'Disabled' }}
          Firewall: {{ 'Enabled' if enable_firewall else 'Disabled' }}
          Audit Logging: {{ 'Enabled' if enable_audit_logging else 'Disabled' }}
          Password Policy: {{ 'Configured' if password_policy is defined else 'Default' }}
          Windows Update: {{ 'Enabled' if enable_windows_update else 'Disabled' }}
          Credential Guard: {{ 'Enabled' if enable_credential_guard else 'Disabled' }}
          Device Guard: {{ 'Enabled' if enable_device_guard else 'Disabled' }}
          BitLocker: {{ 'Enabled' if enable_bitlocker else 'Disabled' }}
          ========================================
          Next steps:
          1. Reboot the system to apply all changes
          2. Verify all security settings are active
          3. Test functionality after hardening
          4. Monitor security logs
          ========================================

