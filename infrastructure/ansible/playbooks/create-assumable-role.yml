---
- name: Create Assumable AWS IAM Role
  hosts: localhost
  gather_facts: false
  vars:
    # Role configuration
    role_name: "{{ role_name | default('TerraformKubernetesRole') }}"
    role_description: "{{ role_description | default('Role for Terraform and Kubernetes operations') }}"

    # Trust policy (who can assume this role)
    trust_policy_type: "{{ trust_policy_type | default('user') }}"  # user, role, service, or external
    trusted_principal: "{{ trusted_principal | default('') }}"  # ARN of trusted entity

    # Permissions
    attach_managed_policies: "{{ attach_managed_policies | default([]) }}"
    create_custom_policy: "{{ create_custom_policy | default(true) }}"
    custom_policy_name: "{{ custom_policy_name | default('TerraformKubernetesPolicy') }}"

    # AWS configuration
    aws_region: "{{ aws_region | default('us-east-1') }}"
    aws_profile: "{{ aws_profile | default('profile-test') }}"

    # Output options
    save_role_info: "{{ save_role_info | default(true) }}"
    output_file: "{{ output_file | default('role-info.json') }}"

  tasks:
    - name: Check if trusted principal is provided
      ansible.builtin.fail:
        msg: "trusted_principal is required. Use: ansible-playbook create-assumable-role.yml -e 'trusted_principal=arn:aws:iam::123456789012:user/YourUser'"
      when: trusted_principal == ""

    - name: Check if AWS CLI is available
      ansible.builtin.command: aws --version
        register: aws_cli_check
        changed_when: false
        failed_when: false

    - name: Fail if AWS CLI not available
      ansible.builtin.fail:
        msg: "AWS CLI is not installed or not in PATH"
      when: aws_cli_check.rc != 0

    - name: Check current AWS identity
      ansible.builtin.command: aws sts get-caller-identity
        register: current_identity
        changed_when: false
        failed_when: false

    - name: Display current AWS identity
      ansible.builtin.debug:
        msg: "Current AWS identity: {{ current_identity.stdout }}"
      when: current_identity.rc == 0

    - name: Create trust policy document
      ansible.builtin.set_fact:
        trust_policy: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  {% if trust_policy_type == 'user' %}
                  "AWS": "{{ trusted_principal }}"
                  {% elif trust_policy_type == 'role' %}
                  "AWS": "{{ trusted_principal }}"
                  {% elif trust_policy_type == 'service' %}
                  "Service": "{{ trusted_principal }}"
                  {% elif trust_policy_type == 'external' %}
                  "Federated": "{{ trusted_principal }}"
                  {% endif %}
                },
                "Action": "sts:AssumeRole",
                "Condition": {
                  "StringEquals": {
                    "sts:ExternalId": "{{ ansible_date_time.epoch | int }}"
                  }
                }
              }
            ]
          }

    - name: Create custom policy document
      ansible.builtin.set_fact:
        custom_policy: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:*",
                  "ecr:*",
                  "eks:*",
                  "iam:*",
                  "rds:*",
                  "s3:*",
                  "ssm:*",
                  "sts:*",
                  "route53:*",
                  "acm:*",
                  "elasticloadbalancing:*",
                  "logs:*",
                  "cloudwatch:*",
                  "autoscaling:*"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sts:AssumeRole",
                  "sts:GetCallerIdentity"
                ],
                "Resource": "*"
              }
            ]
          }
      when: create_custom_policy | bool

    - name: Create custom IAM policy
      ansible.builtin.command: |
        aws iam create-policy \
          --policy-name "{{ custom_policy_name }}" \
          --policy-document '{{ custom_policy }}' \
          --description "Custom policy for {{ role_name }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
        register: create_policy_result
        failed_when: create_policy_result.rc != 0
        when: create_custom_policy | bool

    - name: Get custom policy ARN
      ansible.builtin.set_fact:
        custom_policy_arn: "{{ create_policy_result.stdout | from_json | json_query('Policy.Arn') }}"
      when: create_custom_policy | bool and create_policy_result.rc == 0

    - name: Create IAM role
      ansible.builtin.command: |
        aws iam create-role \
          --role-name "{{ role_name }}" \
          --assume-role-policy-document '{{ trust_policy }}' \
          --description "{{ role_description }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
        register: create_role_result
        failed_when: create_role_result.rc != 0

    - name: Get role ARN
      ansible.builtin.set_fact:
        role_arn: "{{ create_role_result.stdout | from_json | json_query('Role.Arn') }}"

    - name: Attach custom policy to role
      ansible.builtin.command: |
        aws iam attach-role-policy \
          --role-name "{{ role_name }}" \
          --policy-arn "{{ custom_policy_arn }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
      when: create_custom_policy | bool and custom_policy_arn is defined

    - name: Attach managed policies to role
      ansible.builtin.command: |
        aws iam attach-role-policy \
          --role-name "{{ role_name }}" \
          --policy-arn "{{ item }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
      loop: "{{ attach_managed_policies }}"
      when: attach_managed_policies | length > 0

    - name: Wait for role to be available
      ansible.builtin.command: |
        aws iam get-role \
          --role-name "{{ role_name }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
        register: role_check
        until: role_check.rc == 0
        retries: 10
        delay: 5

    - name: Get role details
      ansible.builtin.command: |
        aws iam get-role \
          --role-name "{{ role_name }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
        register: role_details
        changed_when: false

    - name: Get attached policies
      ansible.builtin.command: |
        aws iam list-attached-role-policies \
          --role-name "{{ role_name }}" \
          --region "{{ aws_region }}" \
          --profile "{{ aws_profile }}"
        register: attached_policies
        changed_when: false

    - name: Save role information to file
      ansible.builtin.copy:
        content: |
          {
            "RoleName": "{{ role_name }}",
            "RoleArn": "{{ role_arn }}",
            "Description": "{{ role_description }}",
            "TrustPolicy": {{ trust_policy }},
            "CustomPolicy": {{ custom_policy if create_custom_policy else 'null' }},
            "CustomPolicyArn": "{{ custom_policy_arn if create_custom_policy else 'null' }}",
            "AttachedPolicies": {{ attached_policies.stdout | from_json | json_query('AttachedPolicies') }},
            "CreatedAt": "{{ ansible_date_time.iso8601 }}",
            "UsageInstructions": {
              "AssumeRole": "aws sts assume-role --role-arn {{ role_arn }} --role-session-name my-session",
              "AnsiblePlaybook": "ansible-playbook assume-role.yml -e 'role_arn={{ role_arn }}'",
              "Terraform": "export AWS_PROFILE=assumed-role && terraform plan"
            }
          }
        dest: "{{ output_file }}"
        mode: '0600'
      when: save_role_info | bool

    - name: Create assume role script for this specific role
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Assume Role Script for {{ role_name }}

          set -e

          # Colors
          GREEN='\033[0;32m'
          BLUE='\033[0;34m'
          YELLOW='\033[1;33m'
          NC='\033[0m'

          log() {
              echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
          }

          success() {
              echo -e "${GREEN}[SUCCESS] $1${NC}"
          }

          warn() {
              echo -e "${YELLOW}[WARNING] $1${NC}"
          }

          # Role configuration
          ROLE_ARN="{{ role_arn }}"
          ROLE_NAME="{{ role_name }}"

          # Session configuration
          SESSION_NAME="${1:-{{ role_name }}-session}"
          DURATION="${2:-3600}"

          log "Assuming role: $ROLE_NAME"
          log "Role ARN: $ROLE_ARN"
          log "Session name: $SESSION_NAME"
          log "Duration: $DURATION seconds"

          # Assume role
          RESPONSE=$(aws sts assume-role \
              --role-arn "$ROLE_ARN" \
              --role-session-name "$SESSION_NAME" \
              --duration-seconds "$DURATION" \
              --output json)

          # Extract credentials
          ACCESS_KEY=$(echo "$RESPONSE" | jq -r '.Credentials.AccessKeyId')
          SECRET_KEY=$(echo "$RESPONSE" | jq -r '.Credentials.SecretAccessKey')
          SESSION_TOKEN=$(echo "$RESPONSE" | jq -r '.Credentials.SessionToken')
          EXPIRATION=$(echo "$RESPONSE" | jq -r '.Credentials.Expiration')

          # Export to environment
          export AWS_ACCESS_KEY_ID="$ACCESS_KEY"
          export AWS_SECRET_ACCESS_KEY="$SECRET_KEY"
          export AWS_SESSION_TOKEN="$SESSION_TOKEN"

          success "Role assumed successfully!"
          log "Expires: $EXPIRATION"
          log "Credentials exported to environment variables"

          # Create profile
          mkdir -p ~/.aws
          cat > ~/.aws/credentials <<EOF
          [{{ role_name | lower }}]
          aws_access_key_id = $ACCESS_KEY
          aws_secret_access_key = $SECRET_KEY
          aws_session_token = $SESSION_TOKEN
          EOF

          cat > ~/.aws/config <<EOF
          [profile {{ role_name | lower }}]
          region = {{ aws_region }}
          output = json
          EOF

          success "Profile '{{ role_name | lower }}' created"
          log "Use: aws --profile {{ role_name | lower }} sts get-caller-identity"
          log "Or: export AWS_PROFILE={{ role_name | lower }}"

          # Display usage instructions
          echo ""
          echo "🚀 Usage Examples:"
          echo "  Test credentials: aws --profile {{ role_name | lower }} sts get-caller-identity"
          echo "  Terraform: export AWS_PROFILE={{ role_name | lower }} && terraform plan"
          echo "  Ansible: ansible-playbook assume-role.yml -e 'role_arn=$ROLE_ARN'"
        dest: "assume-{{ role_name | lower }}.sh"
        mode: '0755'

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ✅ IAM Role '{{ role_name }}' created successfully!

          📋 Role Details:
          - Role Name: {{ role_name }}
          - Role ARN: {{ role_arn }}
          - Description: {{ role_description }}

          🔐 Trust Policy:
          {{ trust_policy | from_json | to_nice_json }}

          📁 Files Created:
          - Role info: {{ output_file }}
          - Assume script: assume-{{ role_name | lower }}.sh

          🚀 Next Steps:
          1. Test role assumption: ./assume-{{ role_name | lower }}.sh
          2. Use with Ansible: ansible-playbook assume-role.yml -e 'role_arn={{ role_arn }}'
          3. Use with Terraform: export AWS_PROFILE={{ role_name | lower }} && terraform plan

          ⚠️  Security Notes:
          - Role has broad permissions for development/testing
          - Consider restricting permissions for production use
          - Review and adjust the trust policy as needed
