---
- name: Deploy Istio Ambient Mode RDS Application
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    namespace: istio-ambient
    app_name: rds-app
    app_version: v1
    app_port: 8080
    db_port: 3306
    seccomp_profile: profiles/kubernetes/seccomp-k8s-database-profile.json
    run_as_user: 1000
    run_as_group: 1000
    fs_group: 1000
    replicas: 2
    min_replicas: 2
    max_replicas: 10
    cpu_request: "100m"
    memory_request: "128Mi"
    cpu_limit: "200m"
    memory_limit: "256Mi"
    rds_host: "rds-endpoint.example.com"
    rds_username: "admin"
    rds_password: "password"
    rds_database: "myapp"
    domain: "rds-app.example.com"

  tasks:
    - name: Check if kubectl is available
    ansible.builtin.command: which kubectl
  register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false

    - name: Check if Kubernetes cluster is running
    ansible.builtin.command: kubectl cluster-info
  register: cluster_check
      failed_when: cluster_check.rc != 0
      changed_when: false

    - name: Check if Istio is installed
    ansible.builtin.command: kubectl get namespace istio-system
  register: istio_check
      failed_when: istio_check.rc != 0
      changed_when: false

    - name: Create seccomp profiles directory
    ansible.builtin.file:
        path: /var/lib/kubelet/seccomp/profiles
        state: directory
        mode: '0755'
        owner: root
        group: root
      become: true

    - name: Copy seccomp profiles to Kubernetes directory
    ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/var/lib/kubelet/seccomp/profiles/"
        mode: '0644'
        owner: root
        group: root
      become: true
      loop:
        - "selinux/seccomp-profiles.json"
        - "selinux/seccomp-kubelet-profile.json"
        - "selinux/seccomp-kube-proxy-profile.json"
        - "selinux/seccomp-k8s-webapp-profile.json"
        - "selinux/seccomp-k8s-database-profile.json"
        - "selinux/seccomp-k8s-system-profile.json"
        - "selinux/seccomp-bastion-profile.json"
        - "selinux/seccomp-root-profile.json"
        - "selinux/seccomp-container-profile.json"
      ignore_errors: true

    - name: Create symlinks for easier access
    ansible.builtin.file:
        src: "/var/lib/kubelet/seccomp/profiles/{{ item.src }}"
        dest: "/var/lib/kubelet/seccomp/profiles/{{ item.dest }}"
        state: link
        owner: root
        group: root
      become: true
      loop:
        - { src: "seccomp-k8s-database-profile.json", dest: "database-profile.json" }
        - { src: "seccomp-k8s-webapp-profile.json", dest: "webapp-profile.json" }
        - { src: "seccomp-k8s-system-profile.json", dest: "system-profile.json" }

    - name: Create namespace with Istio ambient mode labels
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace }}"
            labels:
              istio.io/dataplane-mode: ambient
              pod-security.kubernetes.io/enforce: restricted
              pod-security.kubernetes.io/audit: restricted
              pod-security.kubernetes.io/warn: restricted

    - name: Create service account
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ app_name }}-sa"
            namespace: "{{ namespace }}"

    - name: Create RDS credentials secret
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: rds-credentials
            namespace: "{{ namespace }}"
          type: Opaque
          data:
            username: "{{ rds_username | b64encode }}"
            password: "{{ rds_password | b64encode }}"
            host: "{{ rds_host | b64encode }}"
            port: "{{ db_port | string | b64encode }}"

    - name: Create application configuration
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: app-config
            namespace: "{{ namespace }}"
          data:
            config.yaml: |
              database:
                host: {{ rds_host }}
                port: {{ db_port }}
                name: {{ rds_database }}
                ssl: true
                ssl_mode: require
              app:
                port: {{ app_port }}
                log_level: info
                metrics_enabled: true

    - name: Create deployment with Istio ambient mode
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ app_name }}"
            namespace: "{{ namespace }}"
            labels:
              app: "{{ app_name }}"
              version: "{{ app_version }}"
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: "{{ app_name }}"
                version: "{{ app_version }}"
  ansible.builtin.template:
              metadata:
                labels:
                  app: "{{ app_name }}"
                  version: "{{ app_version }}"
                  sidecar.istio.io/inject: "false"
              spec:
                serviceAccountName: "{{ app_name }}-sa"
                securityContext:
                  runAsNonRoot: true
                  runAsUser: "{{ run_as_user }}"
                  runAsGroup: "{{ run_as_group }}"
                  fsGroup: "{{ fs_group }}"
                containers:
                - name: app
                  image: nginx:1.21-alpine
                  securityContext:
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
                    runAsUser: {{ run_as_user }}
                    runAsGroup: {{ run_as_group }}
                    capabilities:
                      drop:
                      - ALL
                    seccompProfile:
                      type: Localhost
                      localhostProfile: "{{ seccomp_profile }}"
                  ports:
                  - containerPort: {{ app_port }}
                    name: http
                    protocol: TCP
                  env:
                  - name: DB_HOST
                    valueFrom:
                      secretKeyRef:
                        name: rds-credentials
                        key: host
                  - name: DB_PORT
                    valueFrom:
                      secretKeyRef:
                        name: rds-credentials
                        key: port
                  - name: DB_USERNAME
                    valueFrom:
                      secretKeyRef:
                        name: rds-credentials
                        key: username
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: rds-credentials
                        key: password
                  - name: DB_NAME
                    value: "{{ rds_database }}"
                  - name: APP_PORT
                    value: "{{ app_port }}"
                  volumeMounts:
                  - name: config
                    mountPath: /etc/app
                    readOnly: true
                  - name: tmp
                    mountPath: /tmp
                  - name: var-cache
                    mountPath: /var/cache/nginx
                  - name: var-run
                    mountPath: /var/run
                  - name: seccomp-profiles
                    mountPath: /var/lib/kubelet/seccomp/profiles
                    readOnly: true
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: "{{ app_port }}"
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: {{ app_port }}
                    initialDelaySeconds: 5
                    periodSeconds: 5
                  resources:
                    requests:
                      memory: "{{ memory_request }}"
                      cpu: "{{ cpu_request }}"
                    limits:
                      memory: "{{ memory_limit }}"
                      cpu: "{{ cpu_limit }}"
                volumes:
                - name: config
                  configMap:
                    name: app-config
                - name: tmp
                  emptyDir: {}
                - name: var-cache
                  emptyDir: {}
                - name: var-run
                  emptyDir: {}
                - name: seccomp-profiles
                  hostPath:
                    path: /var/lib/kubelet/seccomp/profiles
                    type: DirectoryOrCreate
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 100
                      podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - key: app
                            operator: In
                            values:
                            - "{{ app_name }}"
                        topologyKey: kubernetes.io/hostname

    - name: Create ClusterIP service
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ app_name }}-service"
            namespace: "{{ namespace }}"
            labels:
              app: "{{ app_name }}"
          spec:
            type: ClusterIP
            ports:
            - port: "{{ app_port }}"
              targetPort: {{ app_port }}
              protocol: TCP
              name: http
            selector:
              app: "{{ app_name }}"

    - name: Create Istio Gateway
      k8s:
        state: present
        definition:
          apiVersion: networking.istio.io/v1beta1
          kind: Gateway
          metadata:
            name: "{{ app_name }}-gateway"
            namespace: "{{ namespace }}"
          spec:
            selector:
              istio: ingressgateway
            servers:
            - port:
                number: 80
                name: http
                protocol: HTTP
              hosts:
              - "{{ domain }}"

    - name: Create Istio VirtualService
      k8s:
        state: present
        definition:
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: "{{ app_name }}-vs"
            namespace: "{{ namespace }}"
          spec:
            hosts:
            - "{{ domain }}"
            gateways:
            - "{{ app_name }}-gateway"
            http:
            - match:
              - uri:
                  prefix: /
              route:
              - destination:
                  host: "{{ app_name }}-service"
                  port:
              number: "{{ app_port }}"
              timeout: 30s
              retries:
                attempts: 3
                perTryTimeout: 10s

    - name: Create Istio DestinationRule
      k8s:
        state: present
        definition:
          apiVersion: networking.istio.io/v1beta1
          kind: DestinationRule
          metadata:
            name: "{{ app_name }}-dr"
            namespace: "{{ namespace }}"
          spec:
            host: "{{ app_name }}-service"
            trafficPolicy:
              loadBalancer:
                simple: ROUND_ROBIN
              connectionPool:
                tcp:
                  maxConnections: 10
                http:
                  http1MaxPendingRequests: 10
                  maxRequestsPerConnection: 2
              circuitBreaker:
                consecutiveErrors: 3
                interval: 30s
                baseEjectionTime: 30s
                maxEjectionPercent: 50

    - name: Create NetworkPolicy
      k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: "{{ app_name }}-netpol"
            namespace: "{{ namespace }}"
          spec:
            podSelector:
              matchLabels:
                app: "{{ app_name }}"
            policyTypes:
            - Ingress
            - Egress
            ingress:
            - from:
              - namespaceSelector:
                  matchLabels:
                    name: istio-system
              - podSelector:
                  matchLabels:
                    app: "{{ app_name }}"
              ports:
              - protocol: TCP
                port: "{{ app_port }}"
            egress:
            - to:
              - namespaceSelector:
                  matchLabels:
                    name: istio-system
              ports:
              - protocol: TCP
                port: 15008
              - protocol: TCP
                port: 15009
            - to: []
              ports:
              - protocol: TCP
                port: {{ db_port }}
              - protocol: TCP
                port: 5432
              - protocol: TCP
                port: 1433

    - name: Create PodDisruptionBudget
      k8s:
        state: present
        definition:
          apiVersion: policy/v1
          kind: PodDisruptionBudget
          metadata:
            name: "{{ app_name }}-pdb"
            namespace: "{{ namespace }}"
          spec:
            minAvailable: 1
            selector:
              matchLabels:
                app: "{{ app_name }}"

    - name: Create HorizontalPodAutoscaler
      k8s:
        state: present
        definition:
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: "{{ app_name }}-hpa"
            namespace: "{{ namespace }}"
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: "{{ app_name }}"
            minReplicas: "{{ min_replicas }}"
            maxReplicas: "{{ max_replicas }}"
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
            - type: Resource
              resource:
                name: memory
                target:
                  type: Utilization
                  averageUtilization: 80

    - name: Wait for deployment to be ready
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_name }}"
        namespace: "{{ namespace }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Verify deployment status
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_name }}"
        namespace: "{{ namespace }}"
  register: deployment_info

    - name: Display deployment status
    ansible.builtin.debug:
        msg: "Deployment {{ app_name }} is {{ deployment_info.resources[0].status.conditions[0].status }}"

    - name: Get pod information
      k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - "app={{ app_name }}"
  register: pod_info

    - name: Display pod information
    ansible.builtin.debug:
        msg: "Pods: {{ pod_info.resources | map(attribute='metadata.name') | list }}"

    - name: Check seccomp profile in pod
      k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - "app={{ app_name }}"
  register: pod_seccomp_info

    - name: Display seccomp profile information
    ansible.builtin.debug:
        msg: "Seccomp profile: {{ pod_seccomp_info.resources[0].spec.containers[0].securityContext.seccompProfile.localhostProfile }}"

    - name: Create ConfigMap with seccomp profiles for reference
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: seccomp-profiles
            namespace: kube-system
          data:
            seccomp-profiles.json: "{{ lookup('file', 'selinux/seccomp-profiles.json') }}"
            seccomp-k8s-database-profile.json: "{{ lookup('file', 'selinux/seccomp-k8s-database-profile.json') }}"
            seccomp-k8s-webapp-profile.json: "{{ lookup('file', 'selinux/seccomp-k8s-webapp-profile.json') }}"
            seccomp-k8s-system-profile.json: "{{ lookup('file', 'selinux/seccomp-k8s-system-profile.json') }}"
      ignore_errors: true

    - name: Display deployment summary
    ansible.builtin.debug:
        msg: |
          ========================================
          Istio Ambient Mode RDS Application Deployed Successfully!
          ========================================
          Namespace: {{ namespace }}
          Application: {{ app_name }}
          Replicas: {{ replicas }}
          Seccomp Profile: {{ seccomp_profile }}
          RDS Host: {{ rds_host }}
          Domain: {{ domain }}
          ========================================
          Access your application:
          kubectl port-forward -n {{ namespace }} service/{{ app_name }}-service {{ app_port }}:{{ app_port }}
          Then visit: http://localhost:{{ app_port }}
          ========================================
