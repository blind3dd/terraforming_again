---
- name: Install AWS IAM Authenticator for Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    aws_iam_authenticator_version: "0.5.9"
    aws_iam_authenticator_url: >-
      "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/
      v{{ aws_iam_authenticator_version }}/aws-iam-authenticator_\
      {{ aws_iam_authenticator_version }}_linux_amd64"
    install_dir: "/usr/local/bin"
    config_dir: "/etc/aws-iam-authenticator"
    aws_region: "us-east-1"
    cluster_name: "my-cluster"
    oidc_issuer_url: "https://oidc.eks.us-east-1.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E"
    aws_account_id: "123456789012"

  tasks:
    - name: Check if running as root
      ansible.builtin.fail:
        msg: "This playbook must be run as root to install system binaries"
        when: ansible_user_id != "root"

    - name: Detect OS family
      ansible.builtin.set_fact:
        os_family: "{{ ansible_os_family }}"

    - name: Set download URL based on OS
      ansible.builtin.set_fact:
        download_url: >-
          {%- set base = "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v" ~ aws_iam_authenticator_version -%}
          {%- set linux = base ~ "/aws-iam-authenticator_" ~ aws_iam_authenticator_version ~ "_linux_amd64" -%}
          {%- set darwin = base ~ "/aws-iam-authenticator_" ~ aws_iam_authenticator_version ~ "_darwin_amd64" -%}
          {%- if os_family in ["RedHat","CentOS","Amazon","Debian","Ubuntu"] -%}
          {{ linux }}
          {%- elif os_family == "Darwin" -%}
          {{ darwin }}
          {%- else -%}
          {{ linux }}
          {%- endif -%}

    - name: Check if aws-iam-authenticator is already installed
      ansible.builtin.command: aws-iam-authenticator version
  register: existing_install
      ignore_errors: true
      changed_when: false

    - name: Display existing version
      ansible.builtin.debug:
        msg: "AWS IAM Authenticator is already installed: {{ existing_install.stdout }}"
        when: existing_install.rc == 0

    - name: Download AWS IAM Authenticator
      ansible.builtin.get_url:
        url: "{{ download_url }}"
        dest: "/tmp/aws-iam-authenticator"
        mode: '0755'
        timeout: 30
        when: existing_install.rc != 0

    - name: Install AWS IAM Authenticator
      ansible.builtin.copy:
        src: "/tmp/aws-iam-authenticator"
        dest: "{{ install_dir }}/aws-iam-authenticator"
        mode: '0755'
        owner: root
        group: root
        remote_src: true
        when: existing_install.rc != 0

    - name: Verify installation
      ansible.builtin.command: aws-iam-authenticator version
  register: install_verification
      changed_when: false

    - name: Display installed version
      ansible.builtin.debug:
        msg: "AWS IAM Authenticator installed successfully: {{ install_verification.stdout }}"

    - name: Create configuration directory
      ansible.builtin.file:
        path: "{{ config_dir }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Create AWS IAM Authenticator configuration
      ansible.builtin.copy:
        content: |
          # AWS IAM Authenticator configuration
          clusterID: {{ cluster_name }}
          server:
            mapRoles:
            - roleARN: arn:aws:iam::{{ aws_account_id }}:role/{{ cluster_name }}-node-group-role
              username: "system:node:{{ EC2PrivateDNSName }}"
              groups:
              - system:bootstrappers
              - system:nodes
            - roleARN: arn:aws:iam::{{ aws_account_id }}:role/{{ cluster_name }}-admin-role
              username: "admin:{{ SessionName }}"
              groups:
              - system:masters
            mapUsers:
            - userARN: arn:aws:iam::{{ aws_account_id }}:user/{{ cluster_name }}-admin
              username: admin
              groups:
              - system:masters
            mapAccounts:
            - "{{ aws_account_id }}"
        dest: "{{ config_dir }}/config.yaml"
        mode: '0644'
        owner: root
        group: root

    - name: Create kubeconfig for AWS IAM Authenticator
      ansible.builtin.copy:
        content: |
        apiVersion: v1
        clusters:
            - cluster:
                certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
        server: https://{{ cluster_name }}.gr7.{{ aws_region }}.eks.amazonaws.com
        name: {{ cluster_name }}
        contexts:
            - context:
        cluster: {{ cluster_name }}
        user: {{ cluster_name }}-admin
        name: {{ cluster_name }}-admin
          current-context: {{ cluster_name }}-admin
        kind: Config
        preferences: {}
        users:
            - name: {{ cluster_name }}-admin
              user:
                exec:
                  apiVersion: client.authentication.k8s.io/v1beta1
              ansible.builtin.command: aws-iam-authenticator
                args:
                    - token
                    - -i
                    - "{{ cluster_name }}"
                    - --region
                    - "{{ aws_region }}"
                dest: "{{ config_dir }}/kubeconfig"
                mode: '0644'
                owner: root
                group: root

    - name: Create OIDC identity provider configuration
      ansible.builtin.copy:
        content: |
          # OIDC Identity Provider Configuration
          # This configuration enables OIDC integration for Kubernetes authentication

          # OIDC Provider URL
          oidc_issuer_url: {{ oidc_issuer_url }}

          # OIDC Client ID
          oidc_client_id: sts.amazonaws.com

          # OIDC Username Claim
          oidc_username_claim: sub

          # OIDC Groups Claim
          oidc_groups_claim: groups

          # OIDC CA Certificate (if needed)
          oidc_ca_file: /etc/ssl/certs/ca-certificates.crt
        dest: "{{ config_dir }}/oidc-config.yaml"
        mode: '0644'
        owner: root
        group: root

    - name: Create IAM roles for Kubernetes
      ansible.builtin.copy:
        content: |
          # IAM Roles for Kubernetes Authentication

          # 1. Node Group Role
          aws iam create-role \
            --role-name {{ cluster_name }}-node-group-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }'

          # 2. Admin Role
          aws iam create-role \
            --role-name {{ cluster_name }}-admin-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::{{ aws_account_id }}:oidc-provider/{{ oidc_issuer_url | regex_replace('https://', '') }}"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "{{ oidc_issuer_url | regex_replace('https://', '') }}:sub": "system:serviceaccount:kube-system:aws-iam-authenticator",
                      "{{ oidc_issuer_url | regex_replace('https://', '') }}:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }'

          # 3. Attach policies to roles
          aws iam attach-role-policy \
            --role-name {{ cluster_name }}-node-group-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

          aws iam attach-role-policy \
            --role-name {{ cluster_name }}-node-group-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

          aws iam attach-role-policy \
            --role-name {{ cluster_name }}-node-group-role \
            --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        dest: "{{ config_dir }}/create-iam-roles.sh"
        mode: '0755'
        owner: root
        group: root

    - name: Create Kubernetes RBAC configuration
      ansible.builtin.copy:
        content: |
          # Kubernetes RBAC Configuration for AWS IAM Authenticator

          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: aws-iam-authenticator
          rules:
          - apiGroups: [""]
            resources: ["users", "groups"]
            verbs: ["impersonate"]
          - apiGroups: [""]
            resources: ["serviceaccounts"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["authentication.k8s.io"]
            resources: ["tokenreviews"]
            verbs: ["create"]
          - apiGroups: ["authorization.k8s.io"]
            resources: ["subjectaccessreviews"]
            verbs: ["create"]

          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: aws-iam-authenticator
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: aws-iam-authenticator
          subjects:
          - kind: ServiceAccount
            name: aws-iam-authenticator
            namespace: kube-system

          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-iam-authenticator
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::{{ aws_account_id }}:role/{{ cluster_name }}-admin-role
        dest: "{{ config_dir }}/rbac.yaml"
        mode: '0644'
        owner: root
        group: root

    - name: Create deployment manifest
      ansible.builtin.copy:
        content: |
          # AWS IAM Authenticator Deployment

          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: aws-iam-authenticator
            namespace: kube-system
            labels:
              app: aws-iam-authenticator
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: aws-iam-authenticator
      ansible.builtin.template:
        metadata:
        labels:
        app: aws-iam-authenticator
        spec:
        serviceAccountName: aws-iam-authenticator
        containers:
                - name: aws-iam-authenticator
                  image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon/aws-iam-authenticator:v{{ aws_iam_authenticator_version }}
                  args:
                    - server
                    - --config=/etc/aws-iam-authenticator/config.yaml
                    - --state-dir=/var/aws-iam-authenticator
                    - --kubeconfig=/etc/aws-iam-authenticator/kubeconfig
                  ports:
                    - containerPort: 21362
                      name: https
                      protocol: TCP
                  volumeMounts:
                    - name: config
                      mountPath: /etc/aws-iam-authenticator
                      readOnly: true
                    - name: state
                      mountPath: /var/aws-iam-authenticator
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 21362
                      scheme: HTTPS
                    initialDelaySeconds: 30
                    timeoutSeconds: 1
                  readinessProbe:
                    httpGet:
                      path: /healthz
                      port: 21362
                      scheme: HTTPS
                    initialDelaySeconds: 5
                    timeoutSeconds: 1
                  resources:
                    requests:
                      cpu: 10m
                      memory: 32Mi
                    limits:
                      cpu: 100m
                      memory: 128Mi
              volumes:
                - name: config
                  configMap:
                    name: aws-iam-authenticator-config
                - name: state
                  emptyDir: {}
              nodeSelector:
                kubernetes.io/os: linux
              tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/master
                - effect: NoSchedule
                  key: node-role.kubernetes.io/control-plane
        dest: "{{ config_dir }}/deployment.yaml"
        mode: '0644'
        owner: root
        group: root

    - name: Create service manifest
      ansible.builtin.copy:
        content: |
          # AWS IAM Authenticator Service

          apiVersion: v1
          kind: Service
          metadata:
            name: aws-iam-authenticator
            namespace: kube-system
            labels:
              app: aws-iam-authenticator
          spec:
            type: ClusterIP
            ports:
            - port: 21362
              targetPort: 21362
              protocol: TCP
              name: https
            selector:
              app: aws-iam-authenticator
        dest: "{{ config_dir }}/service.yaml"
        mode: '0644'
        owner: root
        group: root

    - name: Create installation script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Install AWS IAM Authenticator on Kubernetes cluster

          set -euo pipefail

          echo "Installing AWS IAM Authenticator on Kubernetes cluster..."

          # Create ConfigMap
          kubectl create configmap aws-iam-authenticator-config \
            --from-file=config.yaml \
            --namespace=kube-system \
            --dry-run=client -o yaml | kubectl apply -f -

          # Apply RBAC
          kubectl apply -f rbac.yaml

          # Apply deployment
          kubectl apply -f deployment.yaml

          # Apply service
          kubectl apply -f service.yaml

          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/aws-iam-authenticator -n kube-system

          echo "AWS IAM Authenticator installed successfully!"
          echo "Configuration files are in: {{ config_dir }}"
        dest: "{{ config_dir }}/install.sh"
        mode: '0755'
        owner: root
        group: root

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "/tmp/aws-iam-authenticator"
        state: absent

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ========================================
          AWS IAM Authenticator installation complete!
          ========================================
          Binary installed to: {{ install_dir }}/aws-iam-authenticator
          Configuration directory: {{ config_dir }}
          ========================================
          Next steps:
          1. Update the configuration files in {{ config_dir }} with your specific values
          2. Run {{ config_dir }}/create-iam-roles.sh to create IAM roles
          3. Run {{ config_dir }}/install.sh to deploy on Kubernetes
          4. Update your kubeconfig to use AWS IAM Authenticator
          ========================================
