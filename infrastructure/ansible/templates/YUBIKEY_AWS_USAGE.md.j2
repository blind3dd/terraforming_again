# YubiKey AWS Assume Role Usage Guide

This guide explains how to use the YubiKey AWS Assume Role system for secure AWS access.

## Overview

The YubiKey AWS Assume Role system provides hardware-based authentication for AWS assume role operations, ensuring that only users with physical access to a YubiKey can assume privileged roles.

## Prerequisites

- YubiKey hardware device
- AWS CLI configured with base credentials
- YubiKey Manager (ykman) installed
- Required system packages (jq, openssl, base64)

## Configuration

### Initial Setup

1. **Edit Configuration File**:
   ```bash
   nano {{ config_dir }}/yubikey-aws-config.conf
   ```

2. **Set Required Variables**:
   ```bash
   AWS_ACCOUNT_ID="123456789012"
   DEFAULT_ROLE_NAME="admin"
   ```

3. **Configure Role Mappings**:
   ```bash
   declare -A ROLE_MAPPINGS=(
       ["admin"]="arn:aws:iam::123456789012:role/AdminRole"
       ["developer"]="arn:aws:iam::123456789012:role/DeveloperRole"
       ["readonly"]="arn:aws:iam::123456789012:role/ReadOnlyRole"
   )
   ```

### YubiKey Configuration

1. **Set PIV Slot** (default: 9a):
   ```bash
   YUBIKEY_SLOT="9a"
   ```

2. **Set Algorithm** (default: RSA2048):
   ```bash
   YUBIKEY_ALGORITHM="RSA2048"
   ```

## Usage

### Basic Commands

#### Assume a Role
```bash
# Assume admin role
yk-aws assume admin

# Assume role with custom session name
yk-aws assume developer dev-session

# Assume role with custom duration (in seconds)
yk-aws assume readonly readonly-session 7200
```

#### Interactive Mode
```bash
# Interactive role selection
yk-aws interactive
```

#### List Available Roles
```bash
# Show configured roles
yk-aws list
```

#### Show Current Identity
```bash
# Display current AWS identity
yk-aws identity
```

#### Clear Token Cache
```bash
# Clear cached tokens
yk-aws clear-cache
```

### Advanced Options

#### Custom Configuration File
```bash
# Use custom config file
yk-aws --config /path/to/custom.conf assume admin
```

#### Disable Token Caching
```bash
# Disable token caching
yk-aws --no-cache assume admin
```

#### Verbose Output
```bash
# Enable verbose logging
yk-aws --verbose assume admin
```

#### Skip YubiKey Authentication (Not Recommended)
```bash
# Skip YubiKey auth (security risk)
yk-aws --no-yubikey assume admin
```

## Security Features

### Hardware Authentication
- **YubiKey Required**: Physical YubiKey device must be present
- **Touch Authentication**: User must touch YubiKey to authenticate
- **Challenge-Response**: Cryptographic challenge-response authentication

### Token Management
- **Secure Caching**: Tokens cached with proper permissions (600)
- **Automatic Expiration**: Cached tokens expire after configured duration
- **Manual Cache Clear**: Users can clear cache manually

### Audit Logging
- **All Operations Logged**: Every assume role operation is logged
- **Timestamped Entries**: All log entries include timestamps
- **Security Events**: Failed authentication attempts are logged

## Environment Variables

After successful role assumption, the following environment variables are set:

```bash
AWS_ACCESS_KEY_ID=ASIA...
AWS_SECRET_ACCESS_KEY=...
AWS_SESSION_TOKEN=...
AWS_DEFAULT_REGION={{ aws_region }}
```

## Troubleshooting

### Common Issues

#### YubiKey Not Detected
```bash
# Check YubiKey connection
ykman info

# Restart YubiKey service
sudo systemctl restart pcscd
```

#### Authentication Failed
```bash
# Check YubiKey PIV status
ykman piv info

# Verify PIV slot configuration
ykman piv certificates list
```

#### AWS CLI Errors
```bash
# Check AWS configuration
aws configure list

# Verify base credentials
aws sts get-caller-identity
```

#### Permission Denied
```bash
# Check script permissions
ls -la {{ script_dir }}/yubikey-assume-role

# Fix permissions if needed
chmod +x {{ script_dir }}/yubikey-assume-role
```

### Debug Mode

Enable debug mode for detailed troubleshooting:

```bash
# Enable verbose output
yk-aws --verbose assume admin

# Check configuration
yk-aws config

# View audit logs
tail -f {{ config_dir }}/yubikey-aws-audit.log
```

## Best Practices

### Security
1. **Never Share YubiKey**: Keep YubiKey physically secure
2. **Use Strong Passwords**: Protect YubiKey with strong PIN
3. **Regular Updates**: Keep YubiKey Manager updated
4. **Monitor Logs**: Regularly review audit logs

### Configuration
1. **Minimal Permissions**: Use least privilege principle
2. **Short Sessions**: Use shorter session durations when possible
3. **Regular Rotation**: Rotate role credentials regularly
4. **Backup Configuration**: Keep configuration backups secure

### Usage
1. **Clear Cache**: Clear token cache after use
2. **Verify Identity**: Always verify assumed identity
3. **Monitor Sessions**: Monitor active sessions
4. **Report Issues**: Report security issues immediately

## Integration

### CI/CD Pipelines
```bash
# In CI/CD scripts
export $(yk-aws assume readonly | jq -r 'to_entries[] | "\(.key)=\(.value)"')
```

### Shell Scripts
```bash
#!/bin/bash
# Load credentials
source <(yk-aws assume admin | jq -r 'to_entries[] | "export \(.key)=\(.value)"')

# Use AWS CLI
aws s3 ls
```

### Docker Containers
```bash
# Pass credentials to container
docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN myapp
```

## Support

For issues and support:

1. **Check Logs**: Review audit logs for errors
2. **Verify Configuration**: Ensure configuration is correct
3. **Test YubiKey**: Verify YubiKey functionality
4. **Contact Admin**: Contact system administrator for role issues

## Security Considerations

### Threats Mitigated
- **Credential Theft**: YubiKey prevents credential theft
- **Unauthorized Access**: Physical device required
- **Session Hijacking**: Short-lived tokens reduce risk
- **Insider Threats**: Audit logging provides accountability

### Limitations
- **Physical Access**: Requires physical YubiKey access
- **Single Point of Failure**: YubiKey loss blocks access
- **Network Dependency**: Requires network connectivity
- **Compatibility**: Limited to supported platforms

This system provides enterprise-grade security for AWS assume role operations while maintaining usability and auditability.
