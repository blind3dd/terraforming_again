---
# CoreDNS Configuration tasks for Kubernetes role
- name: Configure CoreDNS
  when: kubernetes_configure_coredns | default(true)
  tags: [coredns, dns]
  block:
    - name: Wait for CoreDNS to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: kube-system
        name: coredns
      register: coredns_deployment
      until: >-
        coredns_deployment.resources |
        selectattr('status.conditions') |
        selectattr('type', 'equalto', 'Available') |
        map(attribute='status') |
        first == 'True'
      retries: 30
      delay: 10

    - name: Create CoreDNS ConfigMap
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-configmap.yml.j2"

    - name: Create CoreDNS Deployment
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-deployment.yml.j2"

    - name: Create CoreDNS Service
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-service.yml.j2"

    - name: Create CoreDNS ServiceAccount
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-serviceaccount.yml.j2"

    - name: Create CoreDNS RBAC
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-rbac.yml.j2"

    - name: Restart CoreDNS deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        kind: Deployment
        name: coredns
        namespace: kube-system
        state: present
        wait: true
        wait_condition:
          type: Available
          status: "True"

    - name: Wait for CoreDNS to be ready after restart
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: kube-system
        name: coredns
      register: coredns_restart
      until: >-
        coredns_restart.resources |
        selectattr('status.conditions') |
        selectattr('type', 'equalto', 'Available') |
        map(attribute='status') |
        first == 'True'
      retries: 30
      delay: 10

    - name: Verify CoreDNS pods
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: kube-system
        label_selectors:
          - k8s-app=kube-dns
      register: coredns_pods

    - name: Display CoreDNS status
      ansible.builtin.debug:
        msg: "CoreDNS pod {{ item.metadata.name }} is {{ item.status.phase }}"
      loop: "{{ coredns_pods.resources }}"

    - name: Test CoreDNS functionality
      ansible.builtin.shell: |
        kubectl run test-dns --image=busybox --rm -i --restart=Never -- nslookup kubernetes.default.svc.cluster.local
      register: dns_test
      failed_when: dns_test.rc != 0
      changed_when: false

    - name: Display DNS test results
      ansible.builtin.debug:
        msg: "{{ dns_test.stdout_lines }}"

- name: Configure CoreDNS for custom domains
  when: kubernetes_configure_custom_domains | default(false)
  tags: [coredns, custom-domains]
  block:
    - name: Create custom domain ConfigMap
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-custom-domains.yml.j2"
      when: kubernetes_custom_domains | default([]) | length > 0

    - name: Create CoreDNS forward zones
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../templates/coredns-forward-zones.yml.j2"
      when: kubernetes_forward_zones | default([]) | length > 0

  when: kubernetes_configure_custom_domains | default(false)
  tags: [coredns, custom-domains]
