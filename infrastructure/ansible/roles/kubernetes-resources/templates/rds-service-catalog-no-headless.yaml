# RDS Service Catalog Configuration - No Headless Service
# This configuration demonstrates how to connect to RDS using Service Catalog
# without any intermediate Kubernetes services

---
apiVersion: v1
kind: Namespace
metadata:
  name: istio-ambient
  labels:
    istio.io/dataplane-mode: ambient
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Service Instance for RDS (creates the RDS connection)
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: rds-mysql-instance
  namespace: istio-ambient
  labels:
    app: rds-mysql-instance
spec:
  clusterServiceClassExternalName: rds-mysql
  clusterServicePlanExternalName: secure-mysql
  parameters:
    database_name: "goapp_users"
    username: "admin"
    password: "${var.rds_password}"
    ssl_mode: "REQUIRED"
    encryption: true
    monitoring: true
    multi_az: true

---
# Service Binding for RDS (creates credentials secret)
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceBinding
metadata:
  name: rds-mysql-binding
  namespace: istio-ambient
  labels:
    app: rds-mysql-binding
spec:
  instanceRef:
    name: rds-mysql-instance
  parameters:
    ssl_mode: "REQUIRED"
    connection_pool_size: 10
  secretName: rds-mysql-credentials

---
# Application Deployment - Direct RDS Connection via Service Catalog
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rds-app
  namespace: istio-ambient
  labels:
    app: rds-app
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rds-app
      version: v1
  template:
    metadata:
      labels:
        app: rds-app
        version: v1
        # Istio ambient mode - no sidecar injection
        sidecar.istio.io/inject: "false"
      annotations:
        # Outbound policy enforcement
        istio.io/outbound-policy: "DENY"
        # RDS connection configuration
        istio.io/rds-endpoints: "${var.rds_endpoint},${var.rds_fqdn}"
    spec:
      serviceAccountName: rds-app-sa
      # Pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: Localhost
          localhostProfile: profiles/kubernetes/seccomp-k8s-database-profile.json
      containers:
      - name: app
        image: nginx:1.21-alpine
        # Container-level security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: Localhost
            localhostProfile: profiles/kubernetes/seccomp-k8s-database-profile.json
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        # RDS connection via Service Catalog secret
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: port
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: database_name
        - name: DB_SSL_MODE
          value: "REQUIRED"
        - name: DB_SSL_CA
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: ssl_ca
        - name: DB_SSL_CERT
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: ssl_cert
        - name: DB_SSL_KEY
          valueFrom:
            secretKeyRef:
              name: rds-mysql-credentials
              key: ssl_key
        - name: APP_PORT
          value: "8080"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: seccomp-profiles
          mountPath: /var/lib/kubelet/seccomp/profiles
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: seccomp-profiles
        hostPath:
          path: /var/lib/kubelet/seccomp/profiles
          type: DirectoryOrCreate
      - name: ssl-certs
        secret:
          secretName: rds-mysql-credentials
          items:
          - key: ssl_ca
            path: ca.pem
          - key: ssl_cert
            path: client-cert.pem
          - key: ssl_key
            path: client-key.pem
      # Istio ambient mode - no sidecar injection
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rds-app
              topologyKey: kubernetes.io/hostname

---
# ServiceAccount for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rds-app-sa
  namespace: istio-ambient
  labels:
    app: rds-app

---
# Istio Gateway for external access (direct to pods)
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: rds-app-gateway
  namespace: istio-ambient
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - rds-app.example.com

---
# Istio VirtualService for direct pod routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: rds-app-vs
  namespace: istio-ambient
spec:
  hosts:
  - rds-app.example.com
  gateways:
  - rds-app-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: rds-app  # Direct pod selector
        port:
          number: 8080
    timeout: 30s
        retries:
      attempts: 3
      perTryTimeout: 10s

---
# Istio DestinationRule for direct pod load balancing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: rds-app-dr
  namespace: istio-ambient
spec:
  host: rds-app  # Direct pod selector
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 10
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# NetworkPolicy for RDS connection with OutboundPolicy DENY
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rds-app-netpol
  namespace: istio-ambient
spec:
  podSelector:
    matchLabels:
      app: rds-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: rds-app
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow Istio ambient mode communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15008  # Istio ambient mode port
    - protocol: TCP
      port: 15009  # Istio ambient mode port
  # Allow RDS connection only
  - to: []
    ports:
    - protocol: TCP
      port: 3306  # MySQL port
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Deny all other outbound traffic
  - to: []
    ports:
    - protocol: TCP
      port: 1-65535
    - protocol: UDP
      port: 1-65535
    - protocol: ICMP
    - protocol: SCTP
    - protocol: ESP
    - protocol: AH

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rds-app-pdb
  namespace: istio-ambient
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: rds-app

---
# HorizontalPodAutoscaler for scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rds-app-hpa
  namespace: istio-ambient
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rds-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
