apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    name: istio-system

---
# Istio Ambient Mode Configuration with OutboundPolicy DENY
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: ambient-control-plane
  namespace: istio-system
spec:
  profile: ambient
  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
    ztunnel:
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
  values:
    pilot:
      env:
        # Enable outbound policy enforcement
        PILOT_ENABLE_OUTBOUND_POLICY: "true"
        # Registry endpoints for outbound access
        PILOT_OUTBOUND_REGISTRY: "registry-1.docker.io,registry.k8s.io,quay.io,ghcr.io,${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
        # RDS endpoint for database access
        PILOT_OUTBOUND_RDS_ENDPOINTS: "${var.rds_endpoint},${var.rds_fqdn}"
    ztunnel:
      env:
        # Enable outbound policy enforcement
        ZTUNNEL_ENABLE_OUTBOUND_POLICY: "true"
        # Registry endpoints for outbound access
        ZTUNNEL_OUTBOUND_REGISTRY: "registry-1.docker.io,registry.k8s.io,quay.io,ghcr.io,${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
        # RDS endpoint for database access
        ZTUNNEL_OUTBOUND_RDS_ENDPOINTS: "${var.rds_endpoint},${var.rds_fqdn}"
    global:
      # Outbound policy configuration
      outboundPolicy:
        # DENY all outbound traffic by default
        defaultPolicy: DENY
        # Allow specific endpoints
        allowedEndpoints:
          # Container registries
          - host: "registry-1.docker.io"
            ports: ["443", "80"]
          - host: "registry.k8s.io"
            ports: ["443", "80"]
          - host: "quay.io"
            ports: ["443", "80"]
          - host: "ghcr.io"
            ports: ["443", "80"]
          - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
            ports: ["443", "80"]
          # RDS endpoints
          - host: "${var.rds_endpoint}"
            ports: ["3306"]
          - host: "${var.rds_fqdn}"
            ports: ["3306"]
          # AWS services
          - host: "*.amazonaws.com"
            ports: ["443", "80"]
          - host: "*.aws.amazon.com"
            ports: ["443", "80"]
          # DNS resolution
          - host: "169.254.169.253"
            ports: ["53"]
          - host: "8.8.8.8"
            ports: ["53"]
          - host: "8.8.4.4"
            ports: ["53"]
          # NTP
          - host: "169.254.169.123"
            ports: ["123"]
          - host: "pool.ntp.org"
            ports: ["123"]
      # Mesh configuration
      meshConfig:
        # Enable outbound policy enforcement
        outboundPolicy:
          defaultPolicy: DENY
          allowedEndpoints:
            # Container registries
            - host: "registry-1.docker.io"
              ports: ["443", "80"]
            - host: "registry.k8s.io"
              ports: ["443", "80"]
            - host: "quay.io"
              ports: ["443", "80"]
            - host: "ghcr.io"
              ports: ["443", "80"]
            - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
              ports: ["443", "80"]
            # RDS endpoints
            - host: "${var.rds_endpoint}"
              ports: ["3306"]
            - host: "${var.rds_fqdn}"
              ports: ["3306"]
            # AWS services
            - host: "*.amazonaws.com"
              ports: ["443", "80"]
            - host: "*.aws.amazon.com"
              ports: ["443", "80"]
            # DNS resolution
            - host: "169.254.169.253"
              ports: ["53"]
            - host: "8.8.8.8"
              ports: ["53"]
            - host: "8.8.4.4"
              ports: ["53"]
            # NTP
            - host: "169.254.169.123"
              ports: ["123"]
            - host: "pool.ntp.org"
              ports: ["123"]
        # Default proxy configuration
        defaultConfig:
          # Outbound policy enforcement
          outboundPolicy: DENY
          # Registry access
          registryAccess:
            enabled: true
            registries:
              - "registry-1.docker.io"
              - "registry.k8s.io"
              - "quay.io"
              - "ghcr.io"
              - "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          # RDS access
          rdsAccess:
            enabled: true
            endpoints:
              - "${var.rds_endpoint}"
              - "${var.rds_fqdn}"
            ports: ["3306"]
          # AWS services access
          awsAccess:
            enabled: true
            services:
              - "*.amazonaws.com"
              - "*.aws.amazon.com"
            ports: ["443", "80"]
          # DNS access
          dnsAccess:
            enabled: true
            servers:
              - "169.254.169.253"
              - "8.8.8.8"
              - "8.8.4.4"
            ports: ["53"]
          # NTP access
          ntpAccess:
            enabled: true
            servers:
              - "169.254.169.123"
              - "pool.ntp.org"
            ports: ["123"]

---
# Istio Ambient Mode Gateway
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: ambient-gateway
  namespace: istio-system
spec:
  profile: ambient
  components:
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        service:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8080
            name: http2
          - port: 443
            targetPort: 8443
            name: https
  values:
    gateways:
      istio-ingressgateway:
        env:
          # Enable outbound policy enforcement
          PILOT_ENABLE_OUTBOUND_POLICY: "true"
          # Registry endpoints for outbound access
          PILOT_OUTBOUND_REGISTRY: "registry-1.docker.io,registry.k8s.io,quay.io,ghcr.io,${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          # RDS endpoint for database access
          PILOT_OUTBOUND_RDS_ENDPOINTS: "${var.rds_endpoint},${var.rds_fqdn}"

---
# Istio Ambient Mode Egress Gateway (for outbound policy enforcement)
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: ambient-egress
  namespace: istio-system
spec:
  profile: ambient
  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
      k8s:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        service:
          type: ClusterIP
          ports:
          - port: 80
            targetPort: 8080
            name: http2
          - port: 443
            targetPort: 8443
            name: https
  values:
    gateways:
      istio-egressgateway:
        env:
          # Enable outbound policy enforcement
          PILOT_ENABLE_OUTBOUND_POLICY: "true"
          # Registry endpoints for outbound access
          PILOT_OUTBOUND_REGISTRY: "registry-1.docker.io,registry.k8s.io,quay.io,ghcr.io,${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          # RDS endpoint for database access
          PILOT_OUTBOUND_RDS_ENDPOINTS: "${var.rds_endpoint},${var.rds_fqdn}"

---
# Istio Ambient Mode Configuration for RDS Access
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: rds-outbound-policy
  namespace: istio-system
spec:
  host: "*.amazonaws.com"
  trafficPolicy:
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # RDS endpoints
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]
        # Container registries
        - host: "registry-1.docker.io"
          ports: ["443", "80"]
        - host: "registry.k8s.io"
          ports: ["443", "80"]
        - host: "quay.io"
          ports: ["443", "80"]
        - host: "ghcr.io"
          ports: ["443", "80"]
        - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          ports: ["443", "80"]
        # AWS services
        - host: "*.amazonaws.com"
          ports: ["443", "80"]
        - host: "*.aws.amazon.com"
          ports: ["443", "80"]
        # DNS resolution
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
        # NTP
        - host: "169.254.169.123"
          ports: ["123"]
        - host: "pool.ntp.org"
          ports: ["123"]
    # Connection pool for RDS
    connectionPool:
      tcp:
        maxConnections: 10
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for RDS
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for RDS
    tls:
      mode: SIMPLE
      sni: "${var.rds_fqdn}"

---
# Istio Ambient Mode Configuration for Registry Access
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: registry-outbound-policy
  namespace: istio-system
spec:
  host: "*.docker.io"
  trafficPolicy:
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # Container registries
        - host: "registry-1.docker.io"
          ports: ["443", "80"]
        - host: "registry.k8s.io"
          ports: ["443", "80"]
        - host: "quay.io"
          ports: ["443", "80"]
        - host: "ghcr.io"
          ports: ["443", "80"]
        - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          ports: ["443", "80"]
        # AWS services
        - host: "*.amazonaws.com"
          ports: ["443", "80"]
        - host: "*.aws.amazon.com"
          ports: ["443", "80"]
        # DNS resolution
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
        # NTP
        - host: "169.254.169.123"
          ports: ["123"]
        - host: "pool.ntp.org"
          ports: ["123"]
    # Connection pool for registries
    connectionPool:
      tcp:
        maxConnections: 20
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 20
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for registries
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for registries
    tls:
      mode: SIMPLE

---
# Istio Ambient Mode Configuration for AWS Services Access
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: aws-services-outbound-policy
  namespace: istio-system
spec:
  host: "*.amazonaws.com"
  trafficPolicy:
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # AWS services
        - host: "*.amazonaws.com"
          ports: ["443", "80"]
        - host: "*.aws.amazon.com"
          ports: ["443", "80"]
        # Container registries
        - host: "registry-1.docker.io"
          ports: ["443", "80"]
        - host: "registry.k8s.io"
          ports: ["443", "80"]
        - host: "quay.io"
          ports: ["443", "80"]
        - host: "ghcr.io"
          ports: ["443", "80"]
        - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          ports: ["443", "80"]
        # RDS endpoints
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]
        # DNS resolution
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
        # NTP
        - host: "169.254.169.123"
          ports: ["123"]
        - host: "pool.ntp.org"
          ports: ["123"]
    # Connection pool for AWS services
    connectionPool:
      tcp:
        maxConnections: 50
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 50
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for AWS services
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for AWS services
    tls:
      mode: SIMPLE

---
# Istio Ambient Mode Configuration for DNS Access
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: dns-outbound-policy
  namespace: istio-system
spec:
  host: "169.254.169.253"
  trafficPolicy:
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # DNS resolution
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
        # NTP
        - host: "169.254.169.123"
          ports: ["123"]
        - host: "pool.ntp.org"
          ports: ["123"]
        # Container registries
        - host: "registry-1.docker.io"
          ports: ["443", "80"]
        - host: "registry.k8s.io"
          ports: ["443", "80"]
        - host: "quay.io"
          ports: ["443", "80"]
        - host: "ghcr.io"
          ports: ["443", "80"]
        - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          ports: ["443", "80"]
        # RDS endpoints
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]
        # AWS services
        - host: "*.amazonaws.com"
          ports: ["443", "80"]
        - host: "*.aws.amazon.com"
          ports: ["443", "80"]
    # Connection pool for DNS
    connectionPool:
      tcp:
        maxConnections: 10
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for DNS
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for DNS
    tls:
      mode: SIMPLE

---
# Istio Ambient Mode Configuration for NTP Access
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: ntp-outbound-policy
  namespace: istio-system
spec:
  host: "169.254.169.123"
  trafficPolicy:
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # NTP
        - host: "169.254.169.123"
          ports: ["123"]
        - host: "pool.ntp.org"
          ports: ["123"]
        # DNS resolution
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
        # Container registries
        - host: "registry-1.docker.io"
          ports: ["443", "80"]
        - host: "registry.k8s.io"
          ports: ["443", "80"]
        - host: "quay.io"
          ports: ["443", "80"]
        - host: "ghcr.io"
          ports: ["443", "80"]
        - host: "${var.aws_account_id}.dkr.ecr.${var.aws_region}.amazonaws.com"
          ports: ["443", "80"]
        # RDS endpoints
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]
        # AWS services
        - host: "*.amazonaws.com"
          ports: ["443", "80"]
        - host: "*.aws.amazon.com"
          ports: ["443", "80"]
    # Connection pool for NTP
    connectionPool:
      tcp:
        maxConnections: 5
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 5
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for NTP
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for NTP
    tls:
      mode: SIMPLE
