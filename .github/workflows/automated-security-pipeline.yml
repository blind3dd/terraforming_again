name: Automated Security Pipeline

on:
  push:
    branches: [ main, develop, working_branch ]
  pull_request:
    branches: [ main, working_branch ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  repository_dispatch:
    types: [security-alert, dependabot-alert, trivy-scan]
  issues:
    types: [opened, edited, labeled]
  workflow_dispatch:
    inputs:
      security_scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vulnerability
          - compliance
          - policy
          - secrets
      remediation_type:
        description: 'Type of remediation to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - docker
          - secrets
          - configs

permissions:
  contents: read
  security-events: write

env:
  SECURITY_SCAN_VERSION: "v1.0.0"
  KUBERNETES_VERSION: "1.28"
  CAPI_VERSION: "v1.6.0"

jobs:
  # Automated Vulnerability Scanning
  vulnerability-scanning:
    name: Automated Vulnerability Scanning
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.security_scan_type == 'all' ||
      github.event.inputs.security_scan_type == 'vulnerability' ||
      github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: |
        always() &&
        hashFiles('trivy-results.sarif') != '' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Install tools for severity evaluation
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

    - name: Evaluate Trivy severity and optionally fail
      id: trivy-eval
      run: |
        trivy fs --quiet --format json . > trivy-results.json || true
        CRIT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
        echo "critical_count=$CRIT" >> $GITHUB_OUTPUT
        echo "Found $CRIT CRITICAL vulnerabilities"
        if [ "$CRIT" -gt 0 ]; then
          echo "::error::CRITICAL vulnerabilities found ($CRIT). Failing job."
          exit 1
        fi
        
    - name: Run Grype vulnerability scanner
      run: |
        # Install Grype CLI and scan filesystem to SARIF
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin || {
          echo "Grype install failed; skipping"; exit 0; }
        grype dir:. -o sarif > grype-results.sarif || true
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: |
        always() &&
        hashFiles('grype-results.sarif') != '' &&
        (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
      with:
        sarif_file: 'grype-results.sarif'
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'terraforming-again'
        path: '.'
        format: 'SARIF'
        out: 'dependency-check-results.sarif'
        
    - name: Upload Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('dependency-check-results.sarif') != ''
      with:
        sarif_file: 'dependency-check-results.sarif'

  # Automated Compliance Scanning
  compliance-scanning:
    name: Automated Compliance Scanning
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.security_scan_type == 'all' ||
      github.event.inputs.security_scan_type == 'compliance'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CIS Kubernetes Benchmark
      run: |
        # Install kube-bench (robust download/extract)
        set -e
        URL="https://github.com/aquasecurity/kube-bench/releases/latest/download/kube-bench_$(uname -s | tr '[:upper:]' '[:lower:]')_amd64.tar.gz"
        curl -fsSL -o kube-bench.tar.gz "$URL" || { echo "kube-bench download failed; skipping"; exit 0; }
        tar -xzf kube-bench.tar.gz || { echo "kube-bench extract failed; skipping"; exit 0; }
        sudo mv kube-bench /usr/local/bin/ || true
        
        # Run CIS benchmark for manifests
        kube-bench run --targets policies --config-dir=cfg --config=config.yaml --json > cis-results.json || true
        
    - name: Run Checkov for infrastructure compliance
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform,kubernetes,helm
        output_format: sarif
        output_file_path: checkov-compliance-results.sarif
        soft_fail: true
        
    - name: Upload Checkov compliance results (main only)
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && hashFiles('checkov-compliance-results.sarif/results_sarif.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: checkov-compliance-results.sarif/results_sarif.sarif
        
    - name: Run Polaris for Kubernetes best practices
      run: |
        # Install Polaris
        curl -fsSL -o polaris.tar.gz https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz || { echo "⚠️ Polaris download failed; skipping"; exit 0; }
        tar -xzf polaris.tar.gz || { echo "Polaris extract failed; skipping"; exit 0; }
        sudo mv polaris /usr/local/bin/ || true
        
        # Run Polaris on Kubernetes manifests
        find . -name "*.yaml" -path "*/kustomize/*" -o -path "*/templates/*" | while read file; do
          polaris audit --audit-path "$file" --format json > "polaris-$(basename "$file").json" || true
        done

  # Automated Policy Enforcement
  policy-enforcement:
    name: Automated Policy Enforcement
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.security_scan_type == 'all' ||
      github.event.inputs.security_scan_type == 'policy'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OPA Gatekeeper policies
      run: |
        set -e
        # Install OPA (static binary)
        curl -fsSL -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64 || { echo "OPA download failed"; exit 1; }
        chmod +x opa
        sudo mv opa /usr/local/bin/opa
        opa version || true
        
        # Install Conftest
        curl -fsSL -o conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/download/v0.45.0/conftest_0.45.0_Linux_x86_64.tar.gz || { echo "Conftest download failed; skipping"; exit 0; }
        tar -xzf conftest.tar.gz || { echo "Conftest extract failed; skipping"; exit 0; }
        sudo mv conftest /usr/local/bin/conftest || true
        conftest --version || true
        
        # Run Conftest on Kubernetes manifests (do not fail pipeline)
        find . -name "*.yaml" \( -path "*/kustomize/*" -o -path "*/templates/*" \) | while read file; do
          conftest test "$file" --policy security/policies/ || true
        done
        
    - name: Run Kyverno policies
      run: |
        # Install Kyverno CLI (robust)
        curl -fsSL -o kyverno.tar.gz https://github.com/kyverno/kyverno/releases/latest/download/kyverno-cli_linux_x86_64.tar.gz || { echo "Kyverno download failed; skipping"; exit 0; }
        tar -xzf kyverno.tar.gz || { echo "Kyverno extract failed; skipping"; exit 0; }
        sudo mv kyverno /usr/local/bin/kyverno || true
        kyverno version || true
        
        # Run Kyverno policy validation
        find . -name "*.yaml" -path "*/kustomize/*" -o -path "*/templates/*" | while read file; do
          kyverno apply "$file" --policy security/policies/kyverno/ || true
        done

  # Automated Secrets Detection
  secrets-detection:
    name: Automated Secrets Detection
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.security_scan_type == 'all' ||
      github.event.inputs.security_scan_type == 'secrets'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog for secrets detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks for secrets detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Run Semgrep for secrets detection
      run: |
        pipx install semgrep || pip install semgrep || true
        semgrep scan --config p/secrets --config p/security-audit --sarif --output semgrep-secrets.sarif || true
        
    - name: Upload Semgrep secrets results (main only)
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && hashFiles('semgrep-secrets.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: semgrep-secrets.sarif

  # Automated Security Remediation
  security-remediation:
    name: Automated Security Remediation
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'repository_dispatch' ||
      github.event_name == 'issues' ||
      github.event.inputs.security_scan_type == 'all'
    needs: [vulnerability-scanning, compliance-scanning, policy-enforcement, secrets-detection]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Bandit deps
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pbr bandit
        python -c "import sys;print(sys.version)"
        pip show pbr bandit || true
        python -c "import pbr,bandit; print('pbr OK')"

    - name: Run Bandit
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 7
        
    - name: Auto-fix security issues
      run: |
        # Install security tools
        pip install safety bandit semgrep
        
        # Auto-fix Python security issues
        if [ -f "requirements.txt" ]; then
          safety check --json --output safety-report.json || true
          bandit -r . -f json -o bandit-report.json || true
        fi
        
        # Auto-fix Go security issues
        if [ -f "go.mod" ]; then
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./... || true
        fi
        
    - name: Create security remediation PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'security: automated security remediation'
        title: 'Automated Security Remediation'
        body: |
          This PR contains automated security fixes:
          
          - Updated vulnerable dependencies
          - Fixed security policy violations
          - Remediated compliance issues
          - Removed exposed secrets
          
          **Security Scan Results:**
          - Vulnerability Scan: ${{ needs.vulnerability-scanning.result }}
          - Compliance Scan: ${{ needs.compliance-scanning.result }}
          - Policy Enforcement: ${{ needs.policy-enforcement.result }}
          - Secrets Detection: ${{ needs.secrets-detection.result }}
        branch: automated-security-remediation
        delete-branch: true

  # Security Dashboard
  security-dashboard:
    name: Security Dashboard
    runs-on: ubuntu-latest
    if: always()
    needs: [vulnerability-scanning, compliance-scanning, policy-enforcement, secrets-detection]
    
    steps:
    - name: Generate security dashboard
      run: |
        echo "## Security Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Vulnerability Scanning:** ${{ needs.vulnerability-scanning.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Compliance Scanning:** ${{ needs.compliance-scanning.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Policy Enforcement:** ${{ needs.policy-enforcement.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Secrets Detection:** ${{ needs.secrets-detection.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Tools Used:" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy (Vulnerability Scanner)" >> $GITHUB_STEP_SUMMARY
        echo "- Grype (Vulnerability Scanner)" >> $GITHUB_STEP_SUMMARY
        echo "- OWASP Dependency Check" >> $GITHUB_STEP_SUMMARY
        echo "- Checkov (Infrastructure Security)" >> $GITHUB_STEP_SUMMARY
        echo "- Polaris (Kubernetes Best Practices)" >> $GITHUB_STEP_SUMMARY
        echo "- OPA Gatekeeper (Policy Engine)" >> $GITHUB_STEP_SUMMARY
        echo "- Kyverno (Policy Engine)" >> $GITHUB_STEP_SUMMARY
        echo "- TruffleHog (Secrets Detection)" >> $GITHUB_STEP_SUMMARY
        echo "- GitLeaks (Secrets Detection)" >> $GITHUB_STEP_SUMMARY
        echo "- Semgrep (Code Security)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review security scan results" >> $GITHUB_STEP_SUMMARY
        echo "- Address critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- Implement security policies" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor compliance status" >> $GITHUB_STEP_SUMMARY
