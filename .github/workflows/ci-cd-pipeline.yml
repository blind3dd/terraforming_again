name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, working_branch ]
  pull_request:
    branches: [ main, working_branch ]

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.6.0"
  ANSIBLE_VERSION: "7.0.0"

# OIDC permissions for AWS federation
permissions:
  id-token: write
  contents: read

jobs:
  # Security: Code Quality and Linting
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for security analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        pip install pipenv
    
    - name: Install development tools
      run: |
        # Install packages directly to avoid Pipfile conversion issues
        pip install black==24.3.0 flake8==7.0.0 mypy==1.8.0 pytest==8.0.0
        pip install bandit==1.7.5 safety==3.0.1  # Security scanning
        pip install --pre -r requirements.txt  # Install from requirements.txt (--pre for ansible-core RC)
    
    - name: Code formatting check
      run: |
        black --check --diff .
    
    - name: Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking
      run: |
        mypy . --ignore-missing-imports
    
    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Infrastructure: Terraform Validation
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    environment: AWS_ROLE_TO_ASSUME
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup OpenTofu
      run: |
        set -euo pipefail
        sudo apt-get update && sudo apt-get install -y wget unzip coreutils curl
        TOFU_VERSION="1.10.6"
        TOFU_FILE="tofu_${TOFU_VERSION}_linux_amd64.zip"
        TOFU_URL="https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/${TOFU_FILE}"
        echo "Downloading ${TOFU_FILE} ..."
        wget -q "${TOFU_URL}"
        echo "Verifying SHA256 checksum..."
        SHA_URL_1="https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/tofu_${TOFU_VERSION}_SHA256SUMS"
        SHA_URL_2="https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/SHA256SUMS"
        SHA_URL_3="https://github.com/opentofu/opentofu/releases/download/v${TOFU_VERSION}/checksums.txt"
        CHECKSUMS=$(curl -fsSL "${SHA_URL_1}" || curl -fsSL "${SHA_URL_2}" || curl -fsSL "${SHA_URL_3}")
        if [ -z "${CHECKSUMS}" ]; then
          echo "Failed to download checksum list for OpenTofu v${TOFU_VERSION}" >&2
          exit 1
        fi
        EXPECTED_SHA=$(echo "${CHECKSUMS}" | grep "${TOFU_FILE}$" | awk '{print $1}')
        if [ -z "${EXPECTED_SHA}" ]; then
          echo "Failed to find expected SHA for ${TOFU_FILE}" >&2
          exit 1
        fi
        ACTUAL_SHA=$(sha256sum "${TOFU_FILE}" | awk '{print $1}')
        if [ "${EXPECTED_SHA}" != "${ACTUAL_SHA}" ]; then
          echo "SHA256 mismatch for ${TOFU_FILE}" >&2
          echo "Expected: ${EXPECTED_SHA}" >&2
          echo "Actual:   ${ACTUAL_SHA}" >&2
          exit 1
        fi
        echo "Checksum OK"
        unzip -o -q "${TOFU_FILE}"  # -o to overwrite without prompting
        sudo mv tofu /usr/local/bin/
        sudo chmod +x /usr/local/bin/tofu
        sudo ln -sf /usr/local/bin/tofu /usr/local/bin/terraform
        terraform version
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: infrastructure/terraform/environments/test
      run: |
        set -e
        echo "Initializing Terraform providers..."
        terraform init -backend=false -input=false -upgrade -reconfigure
        echo "Terraform init completed"
        if [ ! -d ".terraform/providers" ]; then
          echo "ERROR: .terraform/providers directory not found after init!"
          exit 1
        fi
    
    - name: Terraform Validate
      working-directory: infrastructure/terraform/environments/test
      run: |
        set -e
        # Ensure providers are initialized - reinit if needed
        if [ ! -d ".terraform/providers" ] || [ -z "$(ls -A .terraform/providers 2>/dev/null)" ]; then
          echo "Providers not found, reinitializing..."
          terraform init -backend=false -input=false -upgrade -reconfigure
        fi
        echo "Running terraform validate..."
        terraform validate
    
    - name: Debug - Check secret availability
      run: |
        echo "Checking if AWS_ROLE_TO_ASSUME secret is available..."
        if [ -z "${{ secrets.AWS_ROLE_TO_ASSUME }}" ]; then
          echo "❌ AWS_ROLE_TO_ASSUME is EMPTY or NOT SET"
        else
          echo "✅ AWS_ROLE_TO_ASSUME is set"
          echo "Value length: ${#AWS_ROLE_TO_ASSUME}"
        fi
      env:
        AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION || 'us-east-1' }}

    - name: Verify AWS OIDC Provider identity
      run: |
        echo "AWS identity:"
        aws sts get-caller-identity

    - name: Terraform Plan (Dry Run)
      working-directory: infrastructure/terraform/environments/test
      run: |
        set -e
        # For local backend: -reconfigure is safe and ensures clean state
        # For S3/DynamoDB backend: can omit -reconfigure if backend config is stable
        terraform init -input=false -reconfigure
        terraform workspace select test || terraform workspace new test
        if [ -f "terraform.tfvars" ]; then
          terraform plan -var-file="terraform.tfvars" -out=tfplan
        else
          echo "Warning: terraform.tfvars not found, running plan without var file"
          terraform plan -out=tfplan
        fi
      # Credentials provided by OIDC session above

  # Configuration: Ansible Validation
  ansible-validate:
    name: Ansible Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Ansible and dependencies
      run: |
        pip install ansible==10.1.0
        pip install ansible-lint==24.12.2
        if [ -f "ansible/requirements.txt" ]; then
          pip install -r ansible/requirements.txt
        fi
    
    - name: Ansible Lint
      continue-on-error: true
      run: |
        if [ -d "ansible" ]; then
          ansible-lint ansible/ || echo "Ansible lint found issues (non-blocking)"
        elif [ -d "infrastructure/ansible" ]; then
          ansible-lint infrastructure/ansible/ || echo "Ansible lint found issues (non-blocking)"
        else
          echo "No Ansible directory found; skipping ansible-lint"
        fi
    
    - name: Ansible Syntax Check
      run: |
        if [ -d "ansible" ]; then
          find ansible/ -name "*.yml" -exec ansible-playbook --syntax-check {} \;
        elif [ -d "infrastructure/ansible" ]; then
          find infrastructure/ansible/ -name "*.yml" -exec ansible-playbook --syntax-check {} \;
        else
          echo "No Ansible directory found; skipping syntax check"
        fi

  # Security: SELinux Policy Validation
  selinux-validate:
    name: SELinux Policy Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install SELinux tools
      run: |
        sudo apt-get update
        sudo apt-get install -y selinux-policy-dev checkpolicy
    
    - name: Validate SELinux policies
      run: |
        cd ./infrastructure/ansible/files/selinux
        for policy in *.te; do
          echo "Validating $policy"
          checkmodule -M -m -o ${policy%.te}.mod $policy
        done

  # Deployment: ArgoCD Integration (if enabled)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate, ansible-validate, selinux-validate]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to ArgoCD
      run: |
        echo "Triggering ArgoCD deployment..."
        # ArgoCD will handle the actual deployment
        # This step would typically trigger ArgoCD sync
        curl -X POST "${{ secrets.ARGOCD_WEBHOOK_URL }}" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"ref": "main"}'

  # Security: Compliance Check
  compliance-check:
    name: Compliance & Security Standards
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download security reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports
    
    - name: Compliance validation
      run: |
        echo "Checking compliance standards..."
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" --include="*.tf" --include="*.yml" . | grep -v "example\|placeholder"; then
          echo "ERROR: Potential hardcoded secrets found"
          exit 1
        fi
        
        # Check for dangerous configurations
        if grep -r "protocol.*-1" --include="*.tf" .; then
          echo "ERROR: Dangerous protocol -1 found"
          exit 1
        fi
        
        echo "Compliance check passed"
