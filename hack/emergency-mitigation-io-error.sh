#!/bin/bash

# EMERGENCY SECURITY MITIGATION - I/O ERROR VERSION
# Alternative approaches when system services have I/O errors

set -euo pipefail

echo "üö® EMERGENCY MITIGATION - I/O ERROR VERSION üö®"
echo "Timestamp: $(date)"
echo
echo "‚ö†Ô∏è  CRITICAL: System I/O errors detected!"
echo "This suggests system integrity issues or hardware problems."
echo "Focusing on immediate security threats that can be addressed."
echo

# Function to remove VPN software manually
remove_vpn_software() {
    echo "=== REMOVING VPN SOFTWARE ==="
    echo
    
    echo "üîß Removing NordVPN..."
    if [[ -d "/Applications/NordVPN.app" ]]; then
        sudo rm -rf "/Applications/NordVPN.app"
        echo "  ‚úÖ NordVPN.app removed"
    else
        echo "  ‚ÑπÔ∏è  NordVPN.app not found"
    fi
    
    echo "üîß Removing VPN Unlimited..."
    if [[ -d "/Applications/VPN Unlimited¬Æ.app" ]]; then
        sudo rm -rf "/Applications/VPN Unlimited¬Æ.app"
        echo "  ‚úÖ VPN Unlimited¬Æ.app removed"
    else
        echo "  ‚ÑπÔ∏è  VPN Unlimited¬Æ.app not found"
    fi
    
    echo "üîß Removing VPN configuration files..."
    sudo rm -rf ~/Library/Application\ Support/NordVPN 2>/dev/null || true
    sudo rm -rf ~/Library/Application\ Support/VPN\ Unlimited 2>/dev/null || true
    sudo rm -rf ~/Library/Preferences/com.nordvpn.macos.plist 2>/dev/null || true
    sudo rm -rf ~/Library/Preferences/com.keepsolid.VPNUnlimited.plist 2>/dev/null || true
    
    echo "‚úÖ VPN software removal completed"
    echo
}

# Function to disable tunnel interfaces
disable_tunnel_interfaces() {
    echo "=== DISABLING TUNNEL INTERFACES ==="
    echo
    
    echo "üîß Disabling suspicious tunnel interfaces..."
    
    for i in {4..7}; do
        echo "  Disabling utun$i..."
        if sudo ifconfig utun$i down 2>/dev/null; then
            echo "    ‚úÖ utun$i disabled"
        else
            echo "    ‚ö†Ô∏è  utun$i already down or doesn't exist"
        fi
    done
    
    echo "‚úÖ Tunnel interface disabling completed"
    echo
}

# Function to kill suspicious processes
kill_suspicious_processes() {
    echo "=== KILLING SUSPICIOUS PROCESSES ==="
    echo
    
    echo "üîß Killing multiple networkserviceproxy processes..."
    if sudo pkill -f networkserviceproxy 2>/dev/null; then
        echo "  ‚úÖ networkserviceproxy processes killed"
    else
        echo "  ‚ÑπÔ∏è  No networkserviceproxy processes found"
    fi
    
    echo "üîß Checking for remaining suspicious processes..."
    REMAINING_PROCESSES=$(ps aux | grep -E "(vpn|proxy|tunnel)" | grep -v grep | wc -l)
    if [[ $REMAINING_PROCESSES -gt 0 ]]; then
        echo "  ‚ö†Ô∏è  $REMAINING_PROCESSES suspicious processes still running:"
        ps aux | grep -E "(vpn|proxy|tunnel)" | grep -v grep | while read -r line; do
            echo "    $line"
        done
    else
        echo "  ‚úÖ No suspicious processes running"
    fi
    
    echo "‚úÖ Process cleanup completed"
    echo
}

# Function to check system integrity
check_system_integrity() {
    echo "=== SYSTEM INTEGRITY CHECK ==="
    echo
    
    echo "üîç Checking System Integrity Protection..."
    if csrutil status 2>/dev/null; then
        echo "  ‚úÖ SIP status checked"
    else
        echo "  ‚ö†Ô∏è  Could not check SIP status"
    fi
    
    echo "üîç Checking for I/O errors in system logs..."
    I_O_ERRORS=$(sudo dmesg 2>/dev/null | grep -i "i/o error" | wc -l)
    if [[ $I_O_ERRORS -gt 0 ]]; then
        echo "  ‚ö†Ô∏è  $I_O_ERRORS I/O errors found in system logs"
        echo "  Recent I/O errors:"
        sudo dmesg 2>/dev/null | grep -i "i/o error" | tail -3 | while read -r line; do
            echo "    $line"
        done
    else
        echo "  ‚úÖ No I/O errors in system logs"
    fi
    
    echo "üîç Checking disk health..."
    if diskutil verifyDisk / 2>/dev/null | grep -q "OK"; then
        echo "  ‚úÖ Root disk appears healthy"
    else
        echo "  ‚ö†Ô∏è  Root disk may have issues"
    fi
    
    echo "‚úÖ System integrity check completed"
    echo
}

# Function to secure network without system services
secure_network_alternative() {
    echo "=== ALTERNATIVE NETWORK SECURITY ==="
    echo
    
    echo "üîß Checking current network services..."
    echo "  Active listening ports:"
    netstat -an | grep LISTEN | grep -E "(445|139|548|22|21|23)" | while read -r line; do
        echo "    ‚ö†Ô∏è  $line"
    done
    
    echo "üîß Checking firewall status..."
    if /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate 2>/dev/null | grep -q "enabled"; then
        echo "  ‚úÖ Firewall is enabled"
    else
        echo "  ‚ö†Ô∏è  Firewall is disabled"
        echo "  üîß Attempting to enable firewall..."
        if sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on 2>/dev/null; then
            echo "    ‚úÖ Firewall enabled"
        else
            echo "    ‚ùå Could not enable firewall (I/O error)"
        fi
    fi
    
    echo "‚úÖ Alternative network security completed"
    echo
}

# Function to monitor current threats
monitor_current_threats() {
    echo "=== CURRENT THREAT MONITORING ==="
    echo
    
    echo "üîç Current tunnel interfaces:"
    TUNNEL_COUNT=$(ifconfig | grep -c "^utun" || echo "0")
    echo "  üì° Active tunnel interfaces: $TUNNEL_COUNT"
    
    if [[ $TUNNEL_COUNT -gt 2 ]]; then
        echo "  ‚ö†Ô∏è  WARNING: $TUNNEL_COUNT tunnel interfaces (normal: 0-2)"
        ifconfig | grep -A 1 "^utun" | while read -r line; do
            if [[ "$line" =~ ^utun[0-9]+: ]]; then
                echo "    $line"
            fi
        done
    else
        echo "  ‚úÖ Normal tunnel interface count"
    fi
    
    echo "üîç Current network connections:"
    ESTABLISHED_COUNT=$(netstat -an | grep ESTABLISHED | wc -l)
    echo "  üì° Active connections: $ESTABLISHED_COUNT"
    
    echo "üîç Suspicious network destinations:"
    netstat -an | grep ESTABLISHED | grep -E "(443|80|8080|8443)" | head -5 | while read -r line; do
        echo "  ‚ö†Ô∏è  $line"
    done
    
    echo "‚úÖ Threat monitoring completed"
    echo
}

# Function to generate emergency recommendations
generate_emergency_recommendations() {
    echo "=== EMERGENCY RECOMMENDATIONS ==="
    echo
    
    echo "üö® IMMEDIATE ACTIONS (I/O Error Context):"
    echo "  1. ‚úÖ VPN software removed"
    echo "  2. ‚úÖ Tunnel interfaces disabled"
    echo "  3. ‚úÖ Suspicious processes killed"
    echo "  4. üîÑ Monitor system for I/O errors"
    echo "  5. üîÑ Consider hardware diagnostics"
    echo
    
    echo "üîí SECURITY HARDENING:"
    echo "  ‚Ä¢ System I/O errors suggest hardware/system issues"
    echo "  ‚Ä¢ Consider running Apple Diagnostics"
    echo "  ‚Ä¢ Check disk health with Disk Utility"
    echo "  ‚Ä¢ Monitor system logs for recurring errors"
    echo "  ‚Ä¢ Consider system restore from Time Machine"
    echo
    
    echo "üîç INVESTIGATION:"
    echo "  ‚Ä¢ I/O errors may indicate failing storage"
    echo "  ‚Ä¢ Check for overheating or hardware issues"
    echo "  ‚Ä¢ Monitor system performance"
    echo "  ‚Ä¢ Consider professional hardware assessment"
    echo
    
    echo "‚ö†Ô∏è  CRITICAL WARNING:"
    echo "  ‚Ä¢ I/O errors + 8 tunnel interfaces = SERIOUS ISSUE"
    echo "  ‚Ä¢ This could indicate system compromise + hardware failure"
    echo "  ‚Ä¢ Consider isolating system from network"
    echo "  ‚Ä¢ Document all findings for security analysis"
    echo
}

# Main execution
main() {
    remove_vpn_software
    disable_tunnel_interfaces
    kill_suspicious_processes
    check_system_integrity
    secure_network_alternative
    monitor_current_threats
    generate_emergency_recommendations
    
    echo "=== EMERGENCY MITIGATION COMPLETED (I/O ERROR VERSION) ==="
    echo
    echo "üìä Summary:"
    echo "  ‚Ä¢ VPN software removed"
    echo "  ‚Ä¢ Tunnel interfaces disabled"
    echo "  ‚Ä¢ Suspicious processes killed"
    echo "  ‚Ä¢ System integrity checked"
    echo "  ‚Ä¢ Alternative network security applied"
    echo
    echo "üö® CRITICAL NEXT STEPS:"
    echo "  1. Monitor system for I/O errors"
    echo "  2. Run hardware diagnostics"
    echo "  3. Check disk health"
    echo "  4. Consider system restore"
    echo
    echo "‚ö†Ô∏è  The combination of I/O errors and 8 tunnel interfaces"
    echo "   suggests both security compromise AND system failure!"
    echo "   This requires immediate professional attention."
}

# Run main function
main "$@"
