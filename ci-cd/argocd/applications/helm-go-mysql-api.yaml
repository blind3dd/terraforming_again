apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: go-mysql-api-helm
  namespace: argocd
  labels:
    app.kubernetes.io/name: go-mysql-api
    app.kubernetes.io/part-of: database-ci
    app.kubernetes.io/component: api
    deployment-method: helm
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/sync-options: CreateNamespace=true
    argocd.argoproj.io/sync-options: PrunePropagationPolicy=foreground
    argocd.argoproj.io/sync-options: PruneLast=true
spec:
  project: database-ci-project
  
  source:
    repoURL: https://github.com/blind3dd/database_CI.git
    targetRevision: HEAD
    path: go-mysql-api/chart
    helm:
      valueFiles:
        - values.yaml
        - values-${{ env.ENVIRONMENT || 'dev' }}.yaml
      parameters:
        - name: image.tag
          value: ${{ github.sha }}
        - name: image.repository
          value: ${{ steps.login-ecr.outputs.registry }}/go-mysql-api
        - name: service.type
          value: ClusterIP
        - name: ingress.enabled
          value: "true"
        - name: ingress.className
          value: "nginx"
        - name: ingress.hosts[0].host
          value: "go-mysql-api.${{ env.DOMAIN_NAME }}"
        - name: ingress.hosts[0].paths[0].path
          value: "/"
        - name: ingress.hosts[0].paths[0].pathType
          value: "Prefix"
        - name: ingress.tls[0].secretName
          value: "go-mysql-api-tls"
        - name: ingress.tls[0].hosts[0]
          value: "go-mysql-api.${{ env.DOMAIN_NAME }}"
        - name: resources.limits.cpu
          value: "500m"
        - name: resources.limits.memory
          value: "512Mi"
        - name: resources.requests.cpu
          value: "100m"
        - name: resources.requests.memory
          value: "128Mi"
        - name: replicaCount
          value: "2"
        - name: hpa.enabled
          value: "true"
        - name: hpa.minReplicas
          value: "2"
        - name: hpa.maxReplicas
          value: "10"
        - name: hpa.targetCPUUtilizationPercentage
          value: "80"
        - name: hpa.targetMemoryUtilizationPercentage
          value: "80"
        - name: pdb.enabled
          value: "true"
        - name: pdb.minAvailable
          value: "1"
        - name: networkPolicy.enabled
          value: "true"
        - name: istio.enabled
          value: "true"
        - name: istio.gateway.name
          value: "istio-ingressgateway"
        - name: istio.gateway.namespace
          value: "istio-system"
        - name: istio.virtualService.hosts[0]
          value: "go-mysql-api.${{ env.DOMAIN_NAME }}"
        - name: istio.virtualService.gateways[0]
          value: "istio-ingressgateway.istio-system"
        - name: istio.destinationRule.trafficPolicy.loadBalancer.simple
          value: "ROUND_ROBIN"
        - name: istio.destinationRule.trafficPolicy.connectionPool.tcp.maxConnections
          value: "100"
        - name: istio.destinationRule.trafficPolicy.connectionPool.http.http1MaxPendingRequests
          value: "1024"
        - name: istio.destinationRule.trafficPolicy.connectionPool.http.maxRequestsPerConnection
          value: "10"
        - name: istio.destinationRule.trafficPolicy.outlierDetection.consecutive5xxErrors
          value: "5"
        - name: istio.destinationRule.trafficPolicy.outlierDetection.interval
          value: "30s"
        - name: istio.destinationRule.trafficPolicy.outlierDetection.baseEjectionTime
          value: "30s"
        - name: istio.destinationRule.trafficPolicy.outlierDetection.maxEjectionPercent
          value: "10"
        - name: istio.authorizationPolicy.enabled
          value: "true"
        - name: istio.authorizationPolicy.action
          value: "ALLOW"
        - name: istio.peerAuthentication.enabled
          value: "true"
        - name: istio.peerAuthentication.mtls.mode
          value: "STRICT"
        - name: vault.enabled
          value: "true"
        - name: vault.auth.method
          value: "kubernetes"
        - name: vault.auth.role
          value: "go-mysql-api"
        - name: vault.secrets.db_password
          value: "secret/data/go-mysql-api/database"
        - name: vault.secrets.api_key
          value: "secret/data/go-mysql-api/app"
        - name: vault.secrets.aws_credentials
          value: "secret/data/go-mysql-api/aws"
        - name: env.DB_HOST
          value: "${{ env.RDS_ENDPOINT }}"
        - name: env.DB_PORT
          value: "3306"
        - name: env.DB_NAME
          value: "mock_user"
        - name: env.DB_USER
          value: "db_user"
        - name: env.APP_PORT
          value: "8088"
        - name: env.APP_ENV
          value: "${{ env.ENVIRONMENT || 'dev' }}"
        - name: env.LOG_LEVEL
          value: "info"
        - name: env.AWS_REGION
          value: "${{ env.AWS_REGION }}"
        - name: env.AWS_ENDPOINT
          value: "${{ env.AWS_ENDPOINT }}"
      releaseName: go-mysql-api
    
  destination:
    server: https://kubernetes.default.svc
    namespace: go-mysql-api
    
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - RespectIgnoreDifferences=true
    - ApplyOutOfSyncOnly=true
    - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
    
  revisionHistoryLimit: 10
  
  # Health checks
  healthChecks:
  - apiVersion: v1
    kind: Service
    name: go-mysql-api
    namespace: go-mysql-api
  - apiVersion: apps/v1
    kind: Deployment
    name: go-mysql-api
    namespace: go-mysql-api
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    name: go-mysql-api-hpa
    namespace: go-mysql-api
  - apiVersion: policy/v1
    kind: PodDisruptionBudget
    name: go-mysql-api-pdb
    namespace: go-mysql-api
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    name: go-mysql-api-vs
    namespace: go-mysql-api
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    name: go-mysql-api-dr
    namespace: go-mysql-api
  - apiVersion: security.istio.io/v1beta1
    kind: AuthorizationPolicy
    name: go-mysql-api-authz
    namespace: go-mysql-api
  - apiVersion: security.istio.io/v1beta1
    kind: PeerAuthentication
    name: go-mysql-api-mtls
    namespace: go-mysql-api

---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: database-ci-project
  namespace: argocd
spec:
  description: Database CI Infrastructure Project
  
  sourceRepos:
  - 'https://github.com/blind3dd/database_CI.git'
  
  destinations:
  - namespace: 'go-mysql-api'
    server: https://kubernetes.default.svc
  - namespace: 'istio-system'
    server: https://kubernetes.default.svc
  - namespace: 'argocd'
    server: https://kubernetes.default.svc
  - namespace: 'vault'
    server: https://kubernetes.default.svc
  - namespace: 'monitoring'
    server: https://kubernetes.default.svc
    
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRole
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRoleBinding
  - group: 'apiextensions.k8s.io'
    kind: CustomResourceDefinition
  - group: 'admissionregistration.k8s.io'
    kind: MutatingWebhookConfiguration
  - group: 'admissionregistration.k8s.io'
    kind: ValidatingWebhookConfiguration
  - group: 'terraform.io'
    kind: TerraformConfig
  - group: 'vault.io'
    kind: VaultSecret
  - group: 'ansible.io'
    kind: AnsibleJob
  - group: 'karpenter.sh'
    kind: NodeClaim
  - group: 'karpenter.sh'
    kind: NodePool
    
  namespaceResourceWhitelist:
  - group: 'apps'
    kind: Deployment
  - group: 'apps'
    kind: StatefulSet
  - group: 'apps'
    kind: DaemonSet
  - group: ''
    kind: Service
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Secret
  - group: ''
    kind: PersistentVolumeClaim
  - group: 'networking.k8s.io'
    kind: NetworkPolicy
  - group: 'networking.k8s.io'
    kind: Ingress
  - group: 'autoscaling'
    kind: HorizontalPodAutoscaler
  - group: 'policy'
    kind: PodDisruptionBudget
  - group: 'networking.istio.io'
    kind: Gateway
  - group: 'networking.istio.io'
    kind: VirtualService
  - group: 'networking.istio.io'
    kind: DestinationRule
  - group: 'security.istio.io'
    kind: AuthorizationPolicy
  - group: 'security.istio.io'
    kind: PeerAuthentication
  - group: 'monitoring.coreos.com'
    kind: ServiceMonitor
  - group: 'monitoring.coreos.com'
    kind: PrometheusRule
    
  # Security: Restrict dangerous operations
  roles:
  - name: admin
    description: Full access to database-ci project
    policies:
    - p, proj:database-ci-project:admin, applications, *, database-ci-project/*, allow
    - p, proj:database-ci-project:admin, repositories, *, *, allow
    - p, proj:database-ci-project:admin, clusters, *, *, allow
    groups:
    - database-ci-admins
    
  - name: developer
    description: Developer access to database-ci project
    policies:
    - p, proj:database-ci-project:developer, applications, get, database-ci-project/*, allow
    - p, proj:database-ci-project:developer, applications, sync, database-ci-project/*, allow
    - p, proj:database-ci-project:developer, applications, action/*, database-ci-project/*, allow
    - p, proj:database-ci-project:developer, repositories, get, *, *, allow
    groups:
    - database-ci-developers
    
  - name: readonly
    description: Read-only access to database-ci project
    policies:
    - p, proj:database-ci-project:readonly, applications, get, database-ci-project/*, allow
    - p, proj:database-ci-project:readonly, repositories, get, *, *, allow
    groups:
    - database-ci-readonly
    
  # Sync windows for maintenance
  syncWindows:
  - kind: allow
    schedule: '0 2 * * *'  # Allow sync at 2 AM daily
    duration: 1h
    applications:
    - go-mysql-api-helm
    namespaces:
    - go-mysql-api
    clusters:
    - https://kubernetes.default.svc
    
  - kind: deny
    schedule: '0 9-17 * * 1-5'  # Deny sync during business hours
    duration: 8h
    applications:
    - go-mysql-api-helm
    namespaces:
    - go-mysql-api
    clusters:
    - https://kubernetes.default.svc

