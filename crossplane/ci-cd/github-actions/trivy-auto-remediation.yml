name: Trivy Auto-Remediation

on:
  schedule:
    # Run every 6 hours to catch new vulnerabilities
    - cron: '0 */6 * * *'
  push:
    branches: [ main, working_branch ]
    paths:
      - '**/go.mod'
      - '**/go.sum'
      - '**/Dockerfile*'
      - '**/package.json'
      - '**/requirements.txt'
      - '**/Pipfile'
      - '**/Pipfile.lock'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      remediation_type:
        description: 'Type of remediation to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - docker
          - secrets
          - configs
  repository_dispatch:
    types: [security-alert, trivy-scan]

env:
  TRIVY_VERSION: "0.49.1"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      pull-requests: write
      issues: write
    outputs:
      vulnerabilities-found: ${{ steps.scan.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.scan.outputs.critical-count }}
      high-count: ${{ steps.scan.outputs.high-count }}
      medium-count: ${{ steps.scan.outputs.medium-count }}
      low-count: ${{ steps.scan.outputs.low-count }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scanner
      id: scan
      run: |
        echo "üîç Running comprehensive Trivy security scan..."
        
        # Create results directory
        mkdir -p trivy-results
        
        # Scan for vulnerabilities in dependencies
        echo "üì¶ Scanning Go dependencies..."
        if [ -f "go.mod" ]; then
          trivy fs --format json --output trivy-results/go-deps.json . --scanners vuln
        fi
        
        # Scan for vulnerabilities in Docker images
        echo "üê≥ Scanning Docker images..."
        find . -name "Dockerfile*" -type f | while read dockerfile; do
          echo "Scanning $dockerfile"
          trivy config --format json --output "trivy-results/docker-$(basename $dockerfile).json" "$dockerfile"
        done
        
        # Scan for secrets
        echo "üîê Scanning for secrets..."
        trivy fs --format json --output trivy-results/secrets.json . --scanners secret
        
        # Scan for misconfigurations
        echo "‚öôÔ∏è Scanning for misconfigurations..."
        trivy config --format json --output trivy-results/misconfig.json .
        
        # Generate summary
        echo "üìä Generating vulnerability summary..."
        trivy fs --format table --output trivy-results/summary.txt .
        
        # Count vulnerabilities
        CRITICAL=$(trivy fs --format json . | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
        HIGH=$(trivy fs --format json . | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
        MEDIUM=$(trivy fs --format json . | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM") | .VulnerabilityID' | wc -l)
        LOW=$(trivy fs --format json . | jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW") | .VulnerabilityID' | wc -l)
        
        TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))
        
        echo "critical-count=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH" >> $GITHUB_OUTPUT
        echo "medium-count=$MEDIUM" >> $GITHUB_OUTPUT
        echo "low-count=$LOW" >> $GITHUB_OUTPUT
        echo "vulnerabilities-found=$TOTAL" >> $GITHUB_OUTPUT
        
        echo "üö® Found $TOTAL vulnerabilities: $CRITICAL critical, $HIGH high, $MEDIUM medium, $LOW low"
        
        # Upload results as artifacts
        echo "üì§ Uploading scan results..."
        tar -czf trivy-results.tar.gz trivy-results/
        
        # Always upload results, even if no vulnerabilities found
        echo "vulnerabilities-found=true" >> $GITHUB_OUTPUT

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results
        path: trivy-results.tar.gz
        retention-days: 30

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results/*.json') != ''
      with:
        sarif_file: trivy-results/trivy-results.sarif
        category: trivy

  auto-remediate:
    name: Auto-Remediate Vulnerabilities
    runs-on: ubuntu-latest
    needs: trivy-scan
    if: needs.trivy-scan.outputs.vulnerabilities-found == 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "Trivy Auto-Remediation Bot"
        git config --global user.email "trivy-bot@noreply.github.com"

    - name: Auto-remediate Go dependencies
      run: |
        echo "üîß Auto-remediating Go dependencies..."
        
        if [ -f "go.mod" ]; then
          echo "üì¶ Updating Go dependencies to latest secure versions..."
          
          # Update all dependencies to latest versions
          go get -u ./...
          go get -u github.com/go-sql-driver/mysql@latest
          go get -u github.com/gorilla/mux@latest
          go get -u github.com/stretchr/testify@latest
          go get -u github.com/caarlos0/env@latest
          go get -u gopkg.in/yaml.v3@latest
          
          # Tidy up dependencies
          go mod tidy
          go mod verify
          
          echo "‚úÖ Go dependencies updated"
        fi
        
        # Update Go dependencies in subdirectories
        find . -name "go.mod" -not -path "./vendor/*" | while read gomod; do
          dir=$(dirname "$gomod")
          echo "üì¶ Updating dependencies in $dir"
          cd "$dir"
          go get -u ./...
          go mod tidy
          go mod verify
          cd - > /dev/null
        done

    - name: Auto-remediate Docker images
      run: |
        echo "üê≥ Auto-remediating Docker base images..."
        
        # Update Docker base images to latest secure versions
        find . -name "Dockerfile*" -type f | while read dockerfile; do
          echo "üîß Updating $dockerfile..."
          
          # Update Go base images
          sed -i 's/FROM golang:[0-9.]*-alpine[0-9.]*/FROM golang:1.21.5-alpine3.19/g' "$dockerfile"
          sed -i 's/FROM golang:[0-9.]*/FROM golang:1.21.5/g' "$dockerfile"
          
          # Update Alpine base images
          sed -i 's/FROM alpine:[0-9.]*/FROM alpine:3.19/g' "$dockerfile"
          
          # Update Ubuntu base images
          sed -i 's/FROM ubuntu:[0-9.]*/FROM ubuntu:22.04/g' "$dockerfile"
          
          # Update Debian base images
          sed -i 's/FROM debian:[0-9.]*/FROM debian:12/g' "$dockerfile"
          
          # Add security updates
          if grep -q "apk add" "$dockerfile"; then
            sed -i '/apk add/a\    apk upgrade --no-cache' "$dockerfile"
          fi
          
          if grep -q "apt-get install" "$dockerfile"; then
            sed -i '/apt-get install/a\    apt-get upgrade -y' "$dockerfile"
          fi
          
          echo "‚úÖ Updated $dockerfile"
        done

    - name: Auto-remediate Python dependencies
      run: |
        echo "üêç Auto-remediating Python dependencies..."
        
        # Update requirements.txt files
        find . -name "requirements.txt" -type f | while read reqfile; do
          echo "üì¶ Updating $reqfile..."
          
          # Update common vulnerable packages
          sed -i 's/ansible==[0-9.]*/ansible==9.0.0/g' "$reqfile"
          sed -i 's/requests==[0-9.]*/requests==2.31.0/g' "$reqfile"
          sed -i 's/urllib3==[0-9.]*/urllib3==2.0.7/g' "$reqfile"
          sed -i 's/cryptography==[0-9.]*/cryptography==41.0.7/g' "$reqfile"
          sed -i 's/pyyaml==[0-9.]*/pyyaml==6.0.1/g' "$reqfile"
          sed -i 's/jinja2==[0-9.]*/jinja2==3.1.2/g' "$reqfile"
          
          echo "‚úÖ Updated $reqfile"
        done
        
        # Update Pipfile.lock if present
        if [ -f "Pipfile.lock" ]; then
          echo "üì¶ Updating Pipfile.lock..."
          pipenv update --dev
          echo "‚úÖ Updated Pipfile.lock"
        fi

    - name: Auto-remediate Node.js dependencies
      run: |
        echo "üì¶ Auto-remediating Node.js dependencies..."
        
        find . -name "package.json" -type f | while read pkgfile; do
          echo "üì¶ Updating $pkgfile..."
          
          # Update common vulnerable packages
          sed -i 's/"axios": "[^"]*"/"axios": "^1.6.0"/g' "$pkgfile"
          sed -i 's/"lodash": "[^"]*"/"lodash": "^4.17.21"/g' "$pkgfile"
          sed -i 's/"moment": "[^"]*"/"moment": "^2.29.4"/g' "$pkgfile"
          sed -i 's/"express": "[^"]*"/"express": "^4.18.2"/g' "$pkgfile"
          
          echo "‚úÖ Updated $pkgfile"
        done

    - name: Auto-remediate secrets and hardcoded values
      run: |
        echo "üîê Auto-remediating exposed secrets..."
        
        # Replace hardcoded passwords with environment variables
        find . -type f \( -name "*.py" -o -name "*.go" -o -name "*.js" -o -name "*.ts" -o -name "*.tf" -o -name "*.yaml" -o -name "*.yml" \) | while read file; do
          if [ -f "$file" ]; then
            # Replace common hardcoded patterns
            sed -i 's/password.*=.*"[^"]*"/password = os.getenv("DB_PASSWORD")/g' "$file"
            sed -i 's/api_key.*=.*"[^"]*"/api_key = os.getenv("API_KEY")/g' "$file"
            sed -i 's/secret.*=.*"[^"]*"/secret = os.getenv("SECRET_KEY")/g' "$file"
            sed -i 's/token.*=.*"[^"]*"/token = os.getenv("ACCESS_TOKEN")/g' "$file"
            
            # Replace AWS keys
            sed -i 's/aws_access_key_id.*=.*"[^"]*"/aws_access_key_id = os.getenv("AWS_ACCESS_KEY_ID")/g' "$file"
            sed -i 's/aws_secret_access_key.*=.*"[^"]*"/aws_secret_access_key = os.getenv("AWS_SECRET_ACCESS_KEY")/g' "$file"
          fi
        done
        
        echo "‚úÖ Secrets remediated"

    - name: Create security remediation PR
      run: |
        echo "üìù Creating security remediation PR..."
        
        # Check if there are changes to commit
        if git diff --quiet; then
          echo "‚ÑπÔ∏è No changes to commit"
          exit 0
        fi
        
        # Create a new branch for the remediation
        BRANCH_NAME="trivy-auto-remediation-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        # Add all changes
        git add -A
        
        # Commit changes
        git commit -m "üîí Auto-remediate security vulnerabilities

ü§ñ Automated security remediation by Trivy

## Vulnerabilities Fixed:
- **Critical**: ${{ needs.trivy-scan.outputs.critical-count }}
- **High**: ${{ needs.trivy-scan.outputs.high-count }}
- **Medium**: ${{ needs.trivy-scan.outputs.medium-count }}
- **Low**: ${{ needs.trivy-scan.outputs.low-count }}

## Changes Made:
- ‚úÖ Updated Go dependencies to latest secure versions
- ‚úÖ Updated Docker base images to latest secure versions
- ‚úÖ Updated Python dependencies to latest secure versions
- ‚úÖ Updated Node.js dependencies to latest secure versions
- ‚úÖ Replaced hardcoded secrets with environment variables
- ‚úÖ Applied security patches and updates

## Security Impact:
- Reduced attack surface by updating vulnerable dependencies
- Improved container security with latest base images
- Enhanced secret management practices
- Applied latest security patches

This PR was automatically generated by the Trivy Auto-Remediation workflow.
Please review and merge to apply security fixes."

        # Push the branch
        git push origin "$BRANCH_NAME"
        
        # Create PR using GitHub CLI
        gh pr create \
          --title "üîí Auto-remediate security vulnerabilities" \
          --body "ü§ñ **Automated Security Remediation**

This PR contains automatic fixes for security vulnerabilities detected by Trivy.

## üìä Vulnerability Summary:
- **Critical**: ${{ needs.trivy-scan.outputs.critical-count }}
- **High**: ${{ needs.trivy-scan.outputs.high-count }}
- **Medium**: ${{ needs.trivy-scan.outputs.medium-count }}
- **Low**: ${{ needs.trivy-scan.outputs.low-count }}

## üîß Remediation Actions:
- ‚úÖ Updated Go dependencies to latest secure versions
- ‚úÖ Updated Docker base images to latest secure versions
- ‚úÖ Updated Python dependencies to latest secure versions
- ‚úÖ Updated Node.js dependencies to latest secure versions
- ‚úÖ Replaced hardcoded secrets with environment variables
- ‚úÖ Applied security patches and updates

## üö® Security Impact:
- Reduced attack surface by updating vulnerable dependencies
- Improved container security with latest base images
- Enhanced secret management practices
- Applied latest security patches

## ‚ö†Ô∏è Review Required:
Please review these changes carefully before merging. Some updates may require:
- Testing to ensure compatibility
- Configuration updates for new dependency versions
- Environment variable setup for secret management

---
*This PR was automatically generated by the Trivy Auto-Remediation workflow.*" \
          --label "security,automated,trivy" \
          --assignee "@me" \
          --reviewer "@me"

    - name: Create security issue if critical vulnerabilities found
      if: needs.trivy-scan.outputs.critical-count > 0
      run: |
        echo "üö® Creating security issue for critical vulnerabilities..."
        
        gh issue create \
          --title "üö® CRITICAL: ${{ needs.trivy-scan.outputs.critical-count }} critical security vulnerabilities detected" \
          --body "## üö® Critical Security Alert

**${{ needs.trivy-scan.outputs.critical-count }} critical vulnerabilities** have been detected in the codebase.

## üìä Vulnerability Summary:
- **Critical**: ${{ needs.trivy-scan.outputs.critical-count }}
- **High**: ${{ needs.trivy-scan.outputs.high-count }}
- **Medium**: ${{ needs.trivy-scan.outputs.medium-count }}
- **Low**: ${{ needs.trivy-scan.outputs.low-count }}

## üîß Auto-Remediation:
An automated PR has been created with fixes for these vulnerabilities. Please review and merge immediately.

## ‚ö†Ô∏è Immediate Actions Required:
1. Review the auto-remediation PR
2. Test the fixes thoroughly
3. Merge the PR to apply security patches
4. Monitor for any issues after deployment

## üîç Additional Information:
- Scan results are available in the workflow artifacts
- Detailed vulnerability information can be found in the Trivy scan results
- Consider running additional security scans after applying fixes

---
*This issue was automatically created by the Trivy Auto-Remediation workflow.*" \
          --label "security,critical,urgent" \
          --assignee "@me"

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [trivy-scan, auto-remediate]
    if: always() && (needs.trivy-scan.outputs.critical-count > 0 || needs.trivy-scan.outputs.high-count > 5)
    steps:
    - name: Send security notification
      run: |
        echo "üìß Sending security notification..."
        
        # Create a summary message
        MESSAGE="üö® Security Alert: ${{ needs.trivy-scan.outputs.critical-count }} critical and ${{ needs.trivy-scan.outputs.high-count }} high vulnerabilities detected in terraforming_again repository.
        
        Auto-remediation PR has been created. Please review and merge immediately.
        
        Repository: https://github.com/blind3dd/terraforming_again
        Workflow: https://github.com/blind3dd/terraforming_again/actions/runs/${{ github.run_id }}"
        
        echo "$MESSAGE"
        
        # Here you could integrate with Slack, Teams, email, etc.
        # For now, we'll just log the message
        echo "Security notification would be sent to security team"
