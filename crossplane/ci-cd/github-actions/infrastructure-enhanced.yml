name: Enhanced Infrastructure Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '*.tf'
      - '*.tfvars'
      - '.github/workflows/**'
      - 'templates/**'
      - 'ansible/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - '*.tf'
      - '*.tfvars'
      - '.github/workflows/**'
      - 'templates/**'
      - 'ansible/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      run_security_hardening:
        description: 'Run security hardening with Ansible'
        required: false
        default: true
        type: boolean
      run_aws_audit:
        description: 'Run AWS resource audit'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "us-east-1"
  ANSIBLE_VERSION: "8.0.0"

jobs:
  # Security and Compliance Checks
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Checkov for infrastructure security
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Terraform Infrastructure
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Security Scan
      run: |
        terraform init
        terraform plan -out=tfplan
        checkov -f tfplan --framework terraform_plan
      
    - name: Terraform Plan
      run: terraform plan -out=tfplan -detailed-exitcode
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'test' }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
      continue-on-error: true
        
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'test' }}
        path: tfplan
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let planOutput = 'No changes. Infrastructure is up-to-date.';
          
          try {
            if (fs.existsSync('tfplan')) {
              const { execSync } = require('child_process');
              planOutput = execSync('terraform show -no-color tfplan', { encoding: 'utf8' });
            }
          } catch (error) {
            planOutput = 'Error generating plan output';
          }
          
          const output = `#### Terraform Plan ðŸ“‹
          *Workflow: \`${{ github.workflow }}\`*
          *Environment: \`${{ github.event.inputs.environment || 'test' }}\`*
          
          <details><summary>Show Plan</summary>
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`plan\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  # Ansible Security Hardening (Linux)
  ansible-security-linux:
    name: Ansible Security Hardening (Linux)
    runs-on: ubuntu-latest
    if: github.event.inputs.run_security_hardening == 'true' || github.event.inputs.run_security_hardening == true
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install ansible-lint
        pip install molecule
        pip install docker
        
    - name: Install Ansible Galaxy requirements
      run: |
        cd ansible
        ansible-galaxy install -r requirements.yml
        
    - name: Run Ansible Lint
      run: |
        cd ansible
        ansible-lint playbooks/*.yml
        
    - name: Run SELinux Policy Compilation (Check Mode)
      run: |
        cd ansible
        ansible-playbook playbooks/compile-selinux-policies.yml --check --diff
        
    - name: Run Kubernetes Seccomp Setup (Check Mode)
      run: |
        cd ansible
        ansible-playbook playbooks/setup-k8s-seccomp-profiles.yml --check --diff
        
    - name: Run AWS IAM Authenticator Setup (Check Mode)
      run: |
        cd ansible
        ansible-playbook playbooks/install-aws-iam-authenticator.yml --check --diff

  # Ansible Security Hardening (Windows)
  ansible-security-windows:
    name: Ansible Security Hardening (Windows)
    runs-on: windows-latest
    if: github.event.inputs.run_security_hardening == 'true' || github.event.inputs.run_security_hardening == true
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install ansible-lint
        pip install pywinrm
        
    - name: Install Ansible Galaxy requirements
      run: |
        cd ansible
        ansible-galaxy install -r requirements.yml
        
    - name: Run Ansible Lint (Windows)
      run: |
        cd ansible
        ansible-lint playbooks/*.yml
        
    - name: Test Windows Security Hardening (Check Mode)
      run: |
        cd ansible
        # Create Windows-specific playbook for testing
        ansible-playbook playbooks/windows-security-hardening.yml --check --diff --connection=local
      continue-on-error: true

  # AWS Resource Audit
  aws-audit:
    name: AWS Resource Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.run_aws_audit == 'true' || github.event.inputs.run_aws_audit == true
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Run AWS Resource Audit (Check Mode)
      run: |
        cd ansible
        ansible-playbook playbooks/aws-resource-audit.yml --check --diff \
          -e "cleanup_dangerous_resources=false" \
          -e "backup_before_cleanup=true"
          
    - name: Upload Audit Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: aws-audit-results
        path: |
          /tmp/aws-audit-backup/
          ansible/audit-results/

  # Infrastructure Deployment
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan, ansible-security-linux, ansible-security-windows]
    if: github.ref == 'refs/heads/main' && github.event.inputs.action == 'apply'
    environment: ${{ github.event.inputs.environment || 'test' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'test' }}
        
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        TF_VAR_environment: ${{ github.event.inputs.environment || 'test' }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
        TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
        
    - name: Get Terraform Outputs
      run: |
        echo "KUBERNETES_API_ENDPOINT=$(terraform output -raw kubernetes_api_endpoint)" >> $GITHUB_ENV
        echo "KUBERNETES_CLUSTER_NAME=$(terraform output -raw kubernetes_cluster_name)" >> $GITHUB_ENV
        echo "KUBERNETES_LOAD_BALANCER_DNS=$(terraform output -raw kubernetes_load_balancer_dns)" >> $GITHUB_ENV
        echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
        
    - name: Configure kubectl
      run: |
        # Get kubeconfig from control plane
        CONTROL_PLANE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Role,Values=kubernetes-control-plane" \
          --query 'Reservations[0].Instances[0].[PublicIpAddress]' \
          --output text)
        
        mkdir -p ~/.kube
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ec2-user@${CONTROL_PLANE_IP}:/home/ec2-user/.kube/config ~/.kube/config
        
    - name: Verify Kubernetes Cluster
      run: |
        kubectl get nodes
        kubectl get pods --all-namespaces
        
    - name: Setup ArgoCD Repository Credentials
      if: github.event.inputs.environment == 'production'
      run: |
        # Create kubeconfig secret for ArgoCD
        kubectl create secret generic argocd-repo-credentials \
          --from-literal=username=${{ secrets.GITHUB_TOKEN }} \
          --from-literal=password=${{ secrets.GITHUB_TOKEN }} \
          --namespace argocd \
          --dry-run=client -o yaml | kubectl apply -f -

  # Security Hardening Deployment
  ansible-deploy-security:
    name: Deploy Security Hardening
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event.inputs.run_security_hardening == 'true' || github.event.inputs.run_security_hardening == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        
    - name: Install Ansible Galaxy requirements
      run: |
        cd ansible
        ansible-galaxy install -r requirements.yml
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get Control Plane IP
      id: get-control-plane
      run: |
        CONTROL_PLANE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Role,Values=kubernetes-control-plane" \
          --query 'Reservations[0].Instances[0].[PublicIpAddress]' \
          --output text)
        echo "control_plane_ip=$CONTROL_PLANE_IP" >> $GITHUB_OUTPUT
        
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-control-plane.outputs.control_plane_ip }} >> ~/.ssh/known_hosts
        
    - name: Run Security Hardening
      run: |
        cd ansible
        ansible-playbook playbooks/site.yml \
          -i ${{ steps.get-control-plane.outputs.control_plane_ip }}, \
          -u ec2-user \
          --private-key ~/.ssh/id_rsa \
          -e "environment=${{ github.event.inputs.environment || 'test' }}" \
          -e "aws_region=${{ env.AWS_REGION }}"

  # Container Image Build and Push
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event.inputs.action == 'apply'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: go-mysql-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd go-mysql-api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.build-image.outputs.image }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'
        
    - name: Update Helm values
      run: |
        # Update image tag in Helm values
        sed -i "s|tag: \".*\"|tag: \"${{ github.sha }}\"|g" go-mysql-api/chart/values.yaml
        sed -i "s|repository: \".*\"|repository: \"${{ steps.login-ecr.outputs.registry }}/go-mysql-api\"|g" go-mysql-api/chart/values.yaml
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add go-mysql-api/chart/values.yaml
        git commit -m "Update image tag to ${{ github.sha }}" || exit 0
        git push

  # Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: [terraform-apply, ansible-deploy-security, build-and-push-image]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Configure kubectl
      run: |
        CONTROL_PLANE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Role,Values=kubernetes-control-plane" \
          --query 'Reservations[0].Instances[0].[PublicIpAddress]' \
          --output text)
        
        mkdir -p ~/.kube
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
          ec2-user@${CONTROL_PLANE_IP}:/home/ec2-user/.kube/config ~/.kube/config
        
    - name: Validate Infrastructure
      run: |
        echo "=== Infrastructure Validation ==="
        echo "Kubernetes Cluster Status:"
        kubectl get nodes -o wide
        echo ""
        echo "System Pods Status:"
        kubectl get pods -n kube-system
        echo ""
        echo "ArgoCD Status:"
        kubectl get pods -n argocd || echo "ArgoCD not deployed yet"
        echo ""
        echo "AWS Resources:"
        aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress]' --output table
        
    - name: Generate Deployment Summary
      run: |
        echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'test' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action:** ${{ github.event.inputs.action || 'plan' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Completed Tasks:" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure provisioning" >> $GITHUB_STEP_SUMMARY
        echo "- Security hardening" >> $GITHUB_STEP_SUMMARY
        echo "- Container image build and push" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”„ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- ArgoCD will sync application deployments" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application health" >> $GITHUB_STEP_SUMMARY
        echo "- Review security scan results" >> $GITHUB_STEP_SUMMARY

