name: API Compatibility Webhook

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'kustomize/**'
      - 'go-mysql-api/chart/templates/**'
      - 'ansible/helm-kustomize/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'kustomize/**'
      - 'go-mysql-api/chart/templates/**'
      - 'ansible/helm-kustomize/**'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force chart version update'
        required: false
        default: false
        type: boolean
      k8s_version:
        description: 'Target Kubernetes version'
        required: false
        default: '1.28'
        type: string

env:
  KUBERNETES_VERSION: ${{ github.event.inputs.k8s_version || '1.28' }}

jobs:
  api-compatibility-check:
    name: API Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better diff analysis
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Run API Compatibility Check
      run: |
        chmod +x scripts/check-api-compatibility.sh
        ./scripts/check-api-compatibility.sh -k ${{ env.KUBERNETES_VERSION }}
      continue-on-error: true
      
    - name: Check for API Version Changes
      id: api-changes
      run: |
        echo "Checking for API version changes..."
        
        # Get changed files
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
        fi
        
        echo "Changed files: $CHANGED_FILES"
        
        # Check if any Kustomize or Helm template files changed
        API_FILES_CHANGED=false
        for file in $CHANGED_FILES; do
          if [[ "$file" =~ ^kustomize/.*\.(yaml|yml)$ ]] || [[ "$file" =~ ^go-mysql-api/chart/templates/.*\.(yaml|yml)$ ]] || [[ "$file" =~ ^ansible/helm-kustomize/.*\.(yaml|yml)$ ]]; then
            echo "API-related file changed: $file"
            API_FILES_CHANGED=true
          fi
        done
        
        echo "api_files_changed=$API_FILES_CHANGED" >> $GITHUB_OUTPUT
        
        # Extract API versions from changed files
        if [[ "$API_FILES_CHANGED" == "true" ]]; then
          echo "Extracting API versions from changed files..."
          
          # Get API versions from changed files
          for file in $CHANGED_FILES; do
            if [[ "$file" =~ \.(yaml|yml)$ ]]; then
              echo "Checking file: $file"
              if [[ -f "$file" ]]; then
                grep -h "apiVersion:" "$file" | sed 's/.*apiVersion: *//' | sort | uniq
              fi
            fi
          done > /tmp/changed_apis.txt
          
          # Get API versions from current files
          find kustomize go-mysql-api/chart/templates ansible/helm-kustomize -name "*.yaml" -o -name "*.yml" | \
          xargs grep -h "apiVersion:" | sed 's/.*apiVersion: *//' | sort | uniq > /tmp/current_apis.txt
          
          # Compare API versions
          if ! diff /tmp/changed_apis.txt /tmp/current_apis.txt > /dev/null; then
            echo "API versions changed detected"
            echo "api_versions_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No API version changes detected"
            echo "api_versions_changed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "api_versions_changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Update Chart Version
      if: steps.api-changes.outputs.api_versions_changed == 'true' || github.event.inputs.force_update == 'true'
      run: |
        echo "üîÑ API versions changed - updating Chart.yaml version"
        
        # Get current chart version
        CURRENT_VERSION=$(grep "^version:" go-mysql-api/chart/Chart.yaml | sed 's/version: *//' | tr -d ' ')
        echo "Current version: $CURRENT_VERSION"
        
        # Increment version (minor for API changes)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
        echo "New version: $NEW_VERSION"
        
        # Update Chart.yaml
        sed -i "s/^version: .*/version: $NEW_VERSION/" go-mysql-api/chart/Chart.yaml
        
        # Update helmfile.lock if it exists
        if [[ -f "helmfile/helmfile.lock" ]]; then
          sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/g" helmfile/helmfile.lock
        fi
        
        echo "‚úÖ Chart version updated to $NEW_VERSION"
        
        # Commit changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add go-mysql-api/chart/Chart.yaml
        if [[ -f "helmfile/helmfile.lock" ]]; then
          git add helmfile/helmfile.lock
        fi
        git commit -m "chore: update chart version to $NEW_VERSION due to API compatibility changes" || exit 0
        
        # Push changes
        git push
        
    - name: Create Compatibility Report
      run: |
        echo "## üîç API Compatibility Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Kubernetes Version:** ${{ env.KUBERNETES_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**API Files Changed:** ${{ steps.api-changes.outputs.api_files_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "**API Versions Changed:** ${{ steps.api-changes.outputs.api_versions_changed }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.api-changes.outputs.api_versions_changed }}" == "true" ]]; then
          echo "### üîÑ Chart Version Update" >> $GITHUB_STEP_SUMMARY
          echo "- Chart version updated due to API compatibility changes" >> $GITHUB_STEP_SUMMARY
          echo "- This ensures compatibility with Kubernetes ${{ env.KUBERNETES_VERSION }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚úÖ No Updates Needed" >> $GITHUB_STEP_SUMMARY
          echo "- API versions are compatible" >> $GITHUB_STEP_SUMMARY
          echo "- Chart version remains unchanged" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Changed Files" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
        fi
        
        for file in $CHANGED_FILES; do
          if [[ "$file" =~ \.(yaml|yml)$ ]]; then
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Comment PR with Compatibility Info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const apiFilesChanged = '${{ steps.api-changes.outputs.api_files_changed }}';
          const apiVersionsChanged = '${{ steps.api-changes.outputs.api_versions_changed }}';
          const k8sVersion = '${{ env.KUBERNETES_VERSION }}';
          
          let comment = `#### üîç API Compatibility Check
          
          **Kubernetes Version:** \`${k8sVersion}\`
          **API Files Changed:** ${apiFilesChanged}
          **API Versions Changed:** ${apiVersionsChanged}
          
          `;
          
          if (apiVersionsChanged === 'true') {
            comment += `üîÑ **Chart version will be updated** due to API compatibility changes.
            
            This ensures compatibility with Kubernetes \`${k8sVersion}\` and maintains proper versioning for the Helm chart.
            `;
          } else {
            comment += `‚úÖ **No chart version update needed** - API versions are compatible.
            `;
          }
          
          comment += `
          <details><summary>Show Details</summary>
          
          This webhook automatically:
          - Detects API version changes in Kustomize and Helm templates
          - Updates Chart.yaml version when needed
          - Ensures Kubernetes API compatibility
          - Maintains proper semantic versioning
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  validate-compatibility:
    name: Validate Compatibility
    runs-on: ubuntu-latest
    needs: api-compatibility-check
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Validate Helm Chart
      run: |
        cd go-mysql-api/chart
        helm lint .
        helm template . > /dev/null
        
    - name: Validate Kustomize
      run: |
        find kustomize -name "kustomization.yaml" -exec dirname {} \; | while read dir; do
          echo "Validating $dir"
          kubectl kustomize "$dir" > /dev/null
        done
        
    - name: Final Compatibility Check
      run: |
        chmod +x scripts/check-api-compatibility.sh
        ./scripts/check-api-compatibility.sh -k ${{ env.KUBERNETES_VERSION }}

