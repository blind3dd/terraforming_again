apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: database-nodepool
  labels:
    app.kubernetes.io/name: database-nodepool
    app.kubernetes.io/part-of: database-ci
    app.kubernetes.io/component: karpenter
spec:
  template:
    metadata:
      labels:
        node-type: "database"
        environment: "dev"
      annotations:
        karpenter.sh/do-not-evict: "true"
    spec:
      requirements:
        - key: "karpenter.sh/capacity-type"
          operator: "In"
          values: ["spot", "on-demand"]
        - key: "kubernetes.io/arch"
          operator: "In"
          values: ["amd64"]
        - key: "node.kubernetes.io/instance-type"
          operator: "In"
          values: ["t3.medium", "t3.large", "t3.xlarge"]
      resources:
        requests:
          cpu: "1"
          memory: "2Gi"
      taints:
        - key: "database"
          value: "true"
          effect: "NoSchedule"
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: database-nodeclass
      machine:
        type: "t3.medium"
        imageFamily: "Bottlerocket"
        instanceTypes:
          - "t3.medium"
          - "t3.large"
          - "t3.xlarge"
        instanceStorePolicy: "NVME"
        storage:
          volumes:
            - name: "root"
              ebs:
                volumeType: "gp3"
                volumeSize: "50Gi"
                iops: 3000
                throughput: 125
                encrypted: true
                deleteOnTermination: true
        detailedMonitoring: true
        metadataOptions:
          httpEndpoint: "enabled"
          httpProtocolIPv6: "disabled"
          httpPutResponseHopLimit: 2
          httpTokens: "required"
        userData: |
          [settings.kubernetes]
          cluster-name = "database-ci-cluster"
          api-server = "https://kubernetes.default.svc"
          
          [settings.kubernetes.node-labels]
          node-type = "database"
          environment = "dev"
          
          [settings.kubernetes.node-taints]
          database = "true:NoSchedule"
        role: "KarpenterNodeInstanceProfile"
        tags:
          Environment: "dev"
          Project: "database-ci"
          NodeType: "database"
        subnetSelector:
          karpenter.sh/discovery: "database-ci-cluster"
        securityGroupSelector:
          karpenter.sh/discovery: "database-ci-cluster"
      scheduling:
        nodeSelector:
          node-type: "database"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: "node-type"
                      operator: "In"
                      values: ["database"]
        tolerations:
          - key: "database"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
  limits:
    cpu: "100"
    memory: "200Gi"
  disruption:
    consolidateAfter: "30s"
    consolidateUnder:
      cpu: "50%"
      memory: "50%"
    expireAfter: "2160h"  # 90 days
    budgets:
      - nodes: "10%"
        duration: "1h"
        events:
          "drift": "10%"
          "interruption": "10%"
  weight: 100
