---
# Operators Deployment Playbook using Kustomize
# This playbook deploys Terraform, Vault, and Ansible operators using Kustomize

- name: Deploy Kubernetes Operators via Kustomize
  hosts: kubernetes_cluster
  become: false
  gather_facts: true
  
  vars:
    # Dynamic inventory variables
    k8s_cluster_name: "{{ cluster_name | default('kubernetes-cluster') }}"
    operators_namespace: "operators-{{ environment | default('dev') }}"
    environment: "{{ env | default('dev') }}"
    
    # AWS Configuration from dynamic inventory
    aws_account_id: "{{ aws_account_id | default('123456789012') }}"
    aws_region: "{{ aws_region | default('us-west-2') }}"
    
    # SSM Parameter Store Configuration
    ssm_ansible_vault_password_param: "{{ ansible_vault_password_param | default('/ansible/vault/password') }}"
    ssm_aws_credentials_param: "{{ aws_credentials_param | default('/aws/credentials') }}"
    ssm_vault_token_param: "{{ vault_token_param | default('/vault/token') }}"
    
    # Terraform Configuration
    terraform_state_bucket: "{{ terraform_state_bucket | default('terraform-state-bucket') }}"
    terraform_state_lock_table: "{{ terraform_state_lock_table | default('terraform-state-lock') }}"
    
    # Vault Configuration
    vault_server_enabled: "{{ vault_server_enabled | default(false) }}"
    vault_server_replicas: "{{ vault_server_replicas | default(1) }}"
    
    # Ansible Configuration
    ansible_inventory_path: "{{ ansible_inventory_path | default('/etc/ansible/inventory') }}"
    
    # Kustomize paths
    kustomize_base_path: "{{ playbook_dir }}/../../kustomize/operators/base"
    kustomize_overlay_path: "{{ playbook_dir }}/../../kustomize/operators/overlays/{{ environment }}"

  pre_tasks:
    - name: Display deployment information
      debug:
        msg:
          - "Deploying operators to cluster: {{ k8s_cluster_name }}"
          - "Namespace: {{ operators_namespace }}"
          - "Environment: {{ environment }}"
          - "AWS Region: {{ aws_region }}"
          - "Kustomize Base: {{ kustomize_base_path }}"
          - "Kustomize Overlay: {{ kustomize_overlay_path }}"

    - name: Verify Kubernetes cluster connectivity
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: cluster_nodes
      failed_when: cluster_nodes.resources | length == 0

    - name: Display cluster information
      debug:
        msg:
          - "Connected to cluster with {{ cluster_nodes.resources | length }} nodes"
          - "Nodes: {{ cluster_nodes.resources | map(attribute='metadata.name') | list }}"

    - name: Verify Kustomize is installed
      command: kustomize version --short
      register: kustomize_check
      failed_when: kustomize_check.rc != 0
      changed_when: false

    - name: Display Kustomize version
      debug:
        msg: "Kustomize version: {{ kustomize_check.stdout }}"

  tasks:
    - name: Create namespace for operators
      kubernetes.core.k8s:
        name: "{{ operators_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        labels:
          name: "{{ operators_namespace }}"
          app.kubernetes.io/part-of: "operators"
          app.kubernetes.io/managed-by: "kustomize"
          environment: "{{ environment }}"

    - name: Retrieve secrets from SSM Parameter Store
      block:
        - name: Get Ansible Vault password from SSM
          shell: |
            aws ssm get-parameter --name "{{ ssm_ansible_vault_password_param }}" --region "{{ aws_region }}" --with-decryption --query 'Parameter.Value' --output text
          register: ansible_vault_password_ssm
          changed_when: false

        - name: Get AWS Access Key ID from SSM
          shell: |
            aws ssm get-parameter --name "{{ ssm_aws_credentials_param }}/access-key-id" --region "{{ aws_region }}" --with-decryption --query 'Parameter.Value' --output text
          register: aws_access_key_id_ssm
          changed_when: false

        - name: Get AWS Secret Access Key from SSM
          shell: |
            aws ssm get-parameter --name "{{ ssm_aws_credentials_param }}/secret-access-key" --region "{{ aws_region }}" --with-decryption --query 'Parameter.Value' --output text
          register: aws_secret_access_key_ssm
          changed_when: false

        - name: Get Vault Token from SSM
          shell: |
            aws ssm get-parameter --name "{{ ssm_vault_token_param }}" --region "{{ aws_region }}" --with-decryption --query 'Parameter.Value' --output text
          register: vault_token_ssm
          changed_when: false

      when: use_ssm_secrets | default(true)
      tags: [ssm, secrets]

    - name: Create environment-specific Kustomize overlay
      block:
        - name: Create environment-specific kustomization.yaml
          template:
            src: operators-kustomization-overlay.yml.j2
            dest: "{{ kustomize_overlay_path }}/kustomization-{{ environment }}.yaml"
            mode: '0644'

        - name: Create environment-specific patches
          template:
            src: operators-patches.yml.j2
            dest: "{{ kustomize_overlay_path }}/operators-patches-{{ environment }}.yaml"
            mode: '0644'

        - name: Create environment-specific resources
          template:
            src: operators-resources.yml.j2
            dest: "{{ kustomize_overlay_path }}/operators-resources-{{ environment }}.yaml"
            mode: '0644'

      when: create_environment_overlay | default(true)
      tags: [kustomize, overlay]

    - name: Generate Kustomize manifests
      shell: |
        cd "{{ kustomize_overlay_path }}"
        kustomize build . > /tmp/operators-{{ environment }}-manifests.yaml
      register: kustomize_build
      changed_when: kustomize_build.rc == 0

    - name: Display generated manifests
      debug:
        msg: "{{ kustomize_build.stdout_lines }}"
      when: kustomize_build.stdout_lines | length > 0

    - name: Apply Kustomize manifests
      shell: |
        kubectl apply -f /tmp/operators-{{ environment }}-manifests.yaml
      register: kubectl_apply
      changed_when: kubectl_apply.rc == 0

    - name: Display apply results
      debug:
        msg: "{{ kubectl_apply.stdout_lines }}"
      when: kubectl_apply.stdout_lines | length > 0

    - name: Wait for operators to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ operators_namespace }}"
        label_selectors:
          - app.kubernetes.io/part-of=operators
      register: operator_deployments
      until: operator_deployments.resources | selectattr('status.conditions') | selectattr('type', 'equalto', 'Available') | map(attribute='status') | list | length > 0
      retries: 30
      delay: 10

    - name: Verify operator deployments
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ operators_namespace }}"
      register: all_deployments

    - name: Display operator status
      debug:
        msg: "Operator {{ item.metadata.name }} is {{ item.status.conditions | selectattr('type', 'equalto', 'Available') | map(attribute='status') | first }}"
      loop: "{{ all_deployments.resources }}"
      when: item.metadata.name in ['terraform-operator', 'vault-operator', 'ansible-operator']

    - name: Verify operator services
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: "{{ operators_namespace }}"
      register: operator_services

    - name: Display service status
      debug:
        msg: "Service {{ item.metadata.name }} is {{ item.spec.type }} on {{ item.spec.clusterIP }}"
      loop: "{{ operator_services.resources }}"

    - name: Verify operator pods
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ operators_namespace }}"
        label_selectors:
          - app.kubernetes.io/part-of=operators
      register: operator_pods

    - name: Display pod status
      debug:
        msg: "Pod {{ item.metadata.name }} is {{ item.status.phase }}"
      loop: "{{ operator_pods.resources }}"

  post_tasks:
    - name: Clean up temporary files
      file:
        path: "/tmp/operators-{{ environment }}-manifests.yaml"
        state: absent

    - name: Display deployment summary
      debug:
        msg:
          - "âœ… Kubernetes operators deployment completed successfully"
          - "Environment: {{ environment }}"
          - "Namespace: {{ operators_namespace }}"
          - "Deployed operators: Terraform, Vault, Ansible"
          - "Deployment method: Kustomize"
          - "SSM Integration: {{ 'Enabled' if use_ssm_secrets | default(true) else 'Disabled' }}"
          - "Pods: {{ operator_pods.resources | length }} running"
          - "Services: {{ operator_services.resources | length }} active"
