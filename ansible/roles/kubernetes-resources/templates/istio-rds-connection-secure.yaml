# Istio Ambient Mode RDS Connection with Enhanced Security
# This configuration ensures secure RDS connectivity with OutboundPolicy DENY

---
apiVersion: v1
kind: Namespace
metadata:
  name: istio-ambient
  labels:
    istio.io/dataplane-mode: ambient
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# ServiceAccount with IAM role for RDS access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rds-app-sa
  namespace: istio-ambient
  annotations:
    # AWS IAM role for RDS access (if using IAM authentication)
    eks.amazonaws.com/role-arn: "arn:aws:iam::${var.aws_account_id}:role/rds-app-role"
  labels:
    app: rds-app

---
# Secret for RDS credentials (encrypted at rest)
apiVersion: v1
kind: Secret
metadata:
  name: rds-credentials
  namespace: istio-ambient
  labels:
    app: rds-app
type: Opaque
data:
  # Base64 encoded credentials (replace with actual values)
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQ=  # password
  host: cmRzLWVuZHBvaW50LmV4YW1wbGUuY29t  # rds-endpoint.example.com
  port: MzMwNg==  # 3306
  # SSL certificate for secure connection
  ssl-ca: LS0tLS1CRUdJTi...  # Base64 encoded CA certificate
  ssl-cert: LS0tLS1CRUdJTi...  # Base64 encoded client certificate
  ssl-key: LS0tLS1CRUdJTi...  # Base64 encoded client key

---
# ConfigMap for RDS connection configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rds-config
  namespace: istio-ambient
  labels:
    app: rds-app
data:
  config.yaml: |
    database:
      host: ${var.rds_fqdn}
      port: 3306
      name: myapp
      ssl: true
      ssl_mode: require
      ssl_ca: /etc/ssl/ca.pem
      ssl_cert: /etc/ssl/client-cert.pem
      ssl_key: /etc/ssl/client-key.pem
      # Connection pooling
      max_connections: 10
      connection_timeout: 30s
      read_timeout: 30s
      write_timeout: 30s
      # Retry configuration
      max_retries: 3
      retry_delay: 5s
    app:
      port: 8080
      log_level: info
      metrics_enabled: true
      # Security settings
      enable_tls: true
      tls_min_version: "1.2"
      # Rate limiting
      rate_limit: 100
      rate_limit_window: "1m"

---
# Istio DestinationRule for RDS with OutboundPolicy DENY
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: rds-outbound-policy
  namespace: istio-ambient
spec:
  host: "${var.rds_fqdn}"
  trafficPolicy:
    # Outbound policy enforcement - DENY by default
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        # RDS endpoints only
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]
        # DNS resolution for RDS
        - host: "169.254.169.253"
          ports: ["53"]
        - host: "8.8.8.8"
          ports: ["53"]
        - host: "8.8.4.4"
          ports: ["53"]
    # Connection pool for RDS
    connectionPool:
      tcp:
        maxConnections: 10
        connectTimeout: 30s
        tcpKeepalive:
          time: 7200s
          interval: 75s
          probes: 9
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
    # Circuit breaker for RDS
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Load balancing
    loadBalancer:
      simple: ROUND_ROBIN
    # TLS configuration for RDS
    tls:
      mode: SIMPLE
      sni: "${var.rds_fqdn}"
      # Client certificate authentication
      clientCertificate: /etc/ssl/client-cert.pem
      privateKey: /etc/ssl/client-key.pem
      caCertificates: /etc/ssl/ca.pem

---
# Istio ServiceEntry for RDS (external service)
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: rds-external
  namespace: istio-ambient
spec:
  hosts:
  - "${var.rds_fqdn}"
  - "${var.rds_endpoint}"
  ports:
  - number: 3306
    name: mysql
    protocol: TCP
  location: MESH_EXTERNAL
  resolution: DNS
  # Outbound policy enforcement
  outboundPolicy:
    defaultPolicy: DENY
    allowedEndpoints:
      - host: "${var.rds_endpoint}"
        ports: ["3306"]
      - host: "${var.rds_fqdn}"
        ports: ["3306"]

---
# Istio VirtualService for RDS routing
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: rds-vs
  namespace: istio-ambient
spec:
  hosts:
  - "${var.rds_fqdn}"
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: "${var.rds_fqdn}"
        port:
          number: 3306
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
    # Outbound policy enforcement
    outboundPolicy:
      defaultPolicy: DENY
      allowedEndpoints:
        - host: "${var.rds_endpoint}"
          ports: ["3306"]
        - host: "${var.rds_fqdn}"
          ports: ["3306"]

---
# Deployment with enhanced security for RDS connection
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rds-app
  namespace: istio-ambient
  labels:
    app: rds-app
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rds-app
      version: v1
  template:
    metadata:
      labels:
        app: rds-app
        version: v1
        # Istio ambient mode - no sidecar injection
        sidecar.istio.io/inject: "false"
      annotations:
        # Outbound policy enforcement
        istio.io/outbound-policy: "DENY"
        # RDS connection configuration
        istio.io/rds-endpoints: "${var.rds_endpoint},${var.rds_fqdn}"
    spec:
      serviceAccountName: rds-app-sa
      # Pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: Localhost
          localhostProfile: profiles/kubernetes/seccomp-k8s-database-profile.json
      containers:
      - name: app
        image: nginx:1.21-alpine
        # Container-level security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: Localhost
            localhostProfile: profiles/kubernetes/seccomp-k8s-database-profile.json
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: port
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rds-credentials
              key: password
        - name: DB_NAME
          value: "myapp"
        - name: APP_PORT
          value: "8080"
        - name: DB_SSL_MODE
          value: "require"
        - name: DB_SSL_CA
          value: "/etc/ssl/ca.pem"
        - name: DB_SSL_CERT
          value: "/etc/ssl/client-cert.pem"
        - name: DB_SSL_KEY
          value: "/etc/ssl/client-key.pem"
        volumeMounts:
        - name: config
          mountPath: /etc/app
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: seccomp-profiles
          mountPath: /var/lib/kubelet/seccomp/profiles
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config
        configMap:
          name: rds-config
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: seccomp-profiles
        hostPath:
          path: /var/lib/kubelet/seccomp/profiles
          type: DirectoryOrCreate
      - name: ssl-certs
        secret:
          secretName: rds-credentials
          items:
          - key: ssl-ca
            path: ca.pem
          - key: ssl-cert
            path: client-cert.pem
          - key: ssl-key
            path: client-key.pem
      # Istio ambient mode - no sidecar injection
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rds-app
              topologyKey: kubernetes.io/hostname

---
# NetworkPolicy for RDS connection with OutboundPolicy DENY
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rds-app-netpol
  namespace: istio-ambient
spec:
  podSelector:
    matchLabels:
      app: rds-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: rds-app
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow Istio ambient mode communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15008  # Istio ambient mode port
    - protocol: TCP
      port: 15009  # Istio ambient mode port
  # Allow RDS connection only
  - to: []
    ports:
    - protocol: TCP
      port: 3306  # MySQL port
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Deny all other outbound traffic
  - to: []
    ports:
    - protocol: TCP
      port: 1-65535
    - protocol: UDP
      port: 1-65535
    - protocol: ICMP
    - protocol: SCTP
    - protocol: ESP
    - protocol: AH

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rds-app-pdb
  namespace: istio-ambient
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: rds-app

---
# HorizontalPodAutoscaler for scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rds-app-hpa
  namespace: istio-ambient
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rds-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
