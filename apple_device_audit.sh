#!/bin/bash

# üö® APPLE DEVICE SECURITY AUDIT SCRIPT
# =====================================
# Comprehensive security audit for iPhone, iPad, and Apple Watch
# Checks for Static Tundra rootkit spread and compromise indicators

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AUDIT_LOG="$SCRIPT_DIR/apple_device_audit_$(date +%Y%m%d_%H%M%S).log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Logging function
log() {
    echo "[$TIMESTAMP] $1" | tee -a "$AUDIT_LOG"
}

# Print section header
print_section() {
    echo "" | tee -a "$AUDIT_LOG"
    echo "==========================================" | tee -a "$AUDIT_LOG"
    echo "$1" | tee -a "$AUDIT_LOG"
    echo "==========================================" | tee -a "$AUDIT_LOG"
    echo "" | tee -a "$AUDIT_LOG"
}

# Function to check if Apple Configurator is available
check_apple_configurator() {
    print_section "üîç APPLE CONFIGURATOR AVAILABILITY"
    
    if [ -d "/Applications/Apple Configurator.app" ]; then
        log "‚úÖ Apple Configurator is installed"
        return 0
    else
        log "‚ùå Apple Configurator not found - please install from App Store"
        log "üìã Apple Configurator is required for device auditing"
        return 1
    fi
}

# Function to check connected devices
check_connected_devices() {
    print_section "üîç CONNECTED DEVICE DETECTION"
    
    log "üîç Checking for connected Apple devices..."
    
    # Check for connected devices via system_profiler
    local connected_devices=$(system_profiler SPUSBDataType | grep -A 10 -B 2 -i "iphone\|ipad\|apple watch" || true)
    if [ -n "$connected_devices" ]; then
        log "üì± Connected devices detected:"
        echo "$connected_devices" | tee -a "$AUDIT_LOG"
    else
        log "‚ùå No connected devices detected"
        log "üìã Please connect your iPhone, iPad, and Apple Watch via USB"
        return 1
    fi
    
    # Check for devices via idevice_id (if libimobiledevice is installed)
    if command -v idevice_id >/dev/null 2>&1; then
        local device_ids=$(idevice_id -l 2>/dev/null || true)
        if [ -n "$device_ids" ]; then
            log "üì± Device IDs detected:"
            echo "$device_ids" | tee -a "$AUDIT_LOG"
        else
            log "‚ùå No device IDs detected via libimobiledevice"
        fi
    else
        log "‚ö†Ô∏è  libimobiledevice not installed - install with: brew install libimobiledevice"
    fi
    
    return 0
}

# Function to audit device trust relationships
audit_device_trust() {
    print_section "üîç DEVICE TRUST RELATIONSHIP AUDIT"
    
    log "üîç Auditing device trust relationships..."
    
    # Check for trusted devices in keychain
    local trusted_devices=$(security find-certificate -a | grep -i "trusted" | head -10 || true)
    if [ -n "$trusted_devices" ]; then
        log "üîë Trusted devices found in keychain:"
        echo "$trusted_devices" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No trusted devices found in keychain"
    fi
    
    # Check for device certificates
    local device_certificates=$(security find-certificate -a | grep -i -E "(iphone|ipad|watch)" | head -10 || true)
    if [ -n "$device_certificates" ]; then
        log "üì± Device certificates found:"
        echo "$device_certificates" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No device certificates found"
    fi
    
    # Check for suspicious certificates
    local suspicious_certificates=$(security find-certificate -a | grep -i -E "(microsoft|intune|ansible)" | head -10 || true)
    if [ -n "$suspicious_certificates" ]; then
        log "üö® Suspicious certificates found:"
        echo "$suspicious_certificates" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No suspicious certificates found"
    fi
}

# Function to audit iCloud sync settings
audit_icloud_sync() {
    print_section "üîç ICLOUD SYNC AUDIT"
    
    log "üîç Auditing iCloud sync settings..."
    
    # Check iCloud account status
    local icloud_status=$(defaults read com.apple.icloud 2>/dev/null || echo "No iCloud settings found")
    log "üìã iCloud status: $icloud_status"
    
    # Check iCloud Drive sync
    local icloud_drive=$(defaults read com.apple.icloud.drive 2>/dev/null || echo "No iCloud Drive settings found")
    log "üìã iCloud Drive status: $icloud_drive"
    
    # Check keychain sync
    local keychain_sync=$(defaults read com.apple.icloud.keychain 2>/dev/null || echo "No keychain sync settings found")
    log "üìã Keychain sync status: $keychain_sync"
    
    # Check for suspicious iCloud files
    local suspicious_icloud_files=$(find ~/Library/Mobile\ Documents -name "*microsoft*" -o -name "*intune*" 2>/dev/null | head -10 || true)
    if [ -n "$suspicious_icloud_files" ]; then
        log "üö® Suspicious iCloud files found:"
        echo "$suspicious_icloud_files" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No suspicious iCloud files found"
    fi
}

# Function to audit AirDrop history
audit_airdrop_history() {
    print_section "üîç AIRDROP HISTORY AUDIT"
    
    log "üîç Auditing AirDrop history..."
    
    # Check AirDrop preferences
    local airdrop_prefs=$(defaults read com.apple.airdrop 2>/dev/null || echo "No AirDrop preferences found")
    log "üìã AirDrop preferences: $airdrop_prefs"
    
    # Check for AirDrop logs
    local airdrop_logs=$(find ~/Library/Logs -name "*airdrop*" 2>/dev/null | head -10 || true)
    if [ -n "$airdrop_logs" ]; then
        log "üìã AirDrop logs found:"
        echo "$airdrop_logs" | tee -a "$AUDIT_LOG"
        
        # Analyze AirDrop logs for suspicious activity
        for log_file in $airdrop_logs; do
            log "üîç Analyzing AirDrop log: $log_file"
            local suspicious_activity=$(grep -i -E "(microsoft|intune|ansible|netflow|sniffer)" "$log_file" 2>/dev/null || true)
            if [ -n "$suspicious_activity" ]; then
                log "üö® Suspicious AirDrop activity found:"
                echo "$suspicious_activity" | tee -a "$AUDIT_LOG"
            fi
        done
    else
        log "‚úÖ No AirDrop logs found"
    fi
}

# Function to audit Handoff and Continuity
audit_handoff_continuity() {
    print_section "üîç HANDOFF AND CONTINUITY AUDIT"
    
    log "üîç Auditing Handoff and Continuity settings..."
    
    # Check Handoff preferences
    local handoff_prefs=$(defaults read com.apple.handoff 2>/dev/null || echo "No Handoff preferences found")
    log "üìã Handoff preferences: $handoff_prefs"
    
    # Check Continuity preferences
    local continuity_prefs=$(defaults read com.apple.continuity 2>/dev/null || echo "No Continuity preferences found")
    log "üìã Continuity preferences: $continuity_prefs"
    
    # Check for Handoff logs
    local handoff_logs=$(find ~/Library/Logs -name "*handoff*" 2>/dev/null | head -10 || true)
    if [ -n "$handoff_logs" ]; then
        log "üìã Handoff logs found:"
        echo "$handoff_logs" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No Handoff logs found"
    fi
    
    # Check for Continuity logs
    local continuity_logs=$(find ~/Library/Logs -name "*continuity*" 2>/dev/null | head -10 || true)
    if [ -n "$continuity_logs" ]; then
        log "üìã Continuity logs found:"
        echo "$continuity_logs" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No Continuity logs found"
    fi
}

# Function to audit shared keychain
audit_shared_keychain() {
    print_section "üîç SHARED KEYCHAIN AUDIT"
    
    log "üîç Auditing shared keychain items..."
    
    # Check for shared keychain items
    local shared_items=$(security dump-keychain | grep -i -E "(iphone|ipad|watch|shared)" | head -20 || true)
    if [ -n "$shared_items" ]; then
        log "üîë Shared keychain items found:"
        echo "$shared_items" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No shared keychain items found"
    fi
    
    # Check for suspicious keychain items
    local suspicious_items=$(security dump-keychain | grep -i -E "(microsoft|intune|ansible|netflow|sniffer)" | head -20 || true)
    if [ -n "$suspicious_items" ]; then
        log "üö® Suspicious keychain items found:"
        echo "$suspicious_items" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No suspicious keychain items found"
    fi
}

# Function to audit device backups
audit_device_backups() {
    print_section "üîç DEVICE BACKUP AUDIT"
    
    log "üîç Auditing device backups..."
    
    # Check for iTunes backups
    local itunes_backups=$(find ~/Library/Application\ Support/MobileSync/Backup -type d 2>/dev/null | head -10 || true)
    if [ -n "$itunes_backups" ]; then
        log "üì± iTunes backups found:"
        echo "$itunes_backups" | tee -a "$AUDIT_LOG"
        
        # Check backup timestamps
        for backup in $itunes_backups; do
            local backup_time=$(stat -f "%Sm" "$backup" 2>/dev/null || echo "Unknown")
            log "üìÖ Backup time: $backup_time"
        done
    else
        log "‚úÖ No iTunes backups found"
    fi
    
    # Check for iCloud backups
    local icloud_backups=$(find ~/Library/Mobile\ Documents -name "*backup*" 2>/dev/null | head -10 || true)
    if [ -n "$icloud_backups" ]; then
        log "‚òÅÔ∏è iCloud backups found:"
        echo "$icloud_backups" | tee -a "$AUDIT_LOG"
    else
        log "‚úÖ No iCloud backups found"
    fi
}

# Function to audit device logs
audit_device_logs() {
    print_section "üîç DEVICE LOG AUDIT"
    
    log "üîç Auditing device logs..."
    
    # Check for device logs
    local device_logs=$(find ~/Library/Logs -name "*device*" -o -name "*iphone*" -o -name "*ipad*" 2>/dev/null | head -10 || true)
    if [ -n "$device_logs" ]; then
        log "üìã Device logs found:"
        echo "$device_logs" | tee -a "$AUDIT_LOG"
        
        # Analyze device logs for suspicious activity
        for log_file in $device_logs; do
            log "üîç Analyzing device log: $log_file"
            local suspicious_activity=$(grep -i -E "(microsoft|intune|ansible|netflow|sniffer|tunnel|bridge)" "$log_file" 2>/dev/null || true)
            if [ -n "$suspicious_activity" ]; then
                log "üö® Suspicious device activity found:"
                echo "$suspicious_activity" | tee -a "$AUDIT_LOG"
            fi
        done
    else
        log "‚úÖ No device logs found"
    fi
}

# Function to create device audit checklist
create_audit_checklist() {
    print_section "üìã DEVICE AUDIT CHECKLIST"
    
    log "üìã Creating device audit checklist..."
    
    cat << 'EOF' | tee -a "$AUDIT_LOG"
üîç APPLE DEVICE SECURITY AUDIT CHECKLIST
========================================

üì± DEVICE CONNECTION:
‚ñ° Connect iPhone via USB
‚ñ° Connect iPad via USB  
‚ñ° Connect Apple Watch via USB
‚ñ° Verify device recognition in Apple Configurator
‚ñ° Check device trust relationships

üîë KEYCHAIN AUDIT:
‚ñ° Review shared keychain items
‚ñ° Check for suspicious certificates
‚ñ° Verify device certificates
‚ñ° Remove any Microsoft/Intune certificates
‚ñ° Reset keychain if compromised

‚òÅÔ∏è ICLOUD AUDIT:
‚ñ° Check iCloud account status
‚ñ° Review iCloud Drive sync settings
‚ñ° Audit keychain sync settings
‚ñ° Check for suspicious iCloud files
‚ñ° Review iCloud backup settings

üì° AIRDROP AUDIT:
‚ñ° Review AirDrop history
‚ñ° Check for suspicious file transfers
‚ñ° Analyze AirDrop logs
‚ñ° Verify AirDrop settings

üîÑ HANDOFF/CONTINUITY AUDIT:
‚ñ° Review Handoff settings
‚ñ° Check Continuity preferences
‚ñ° Analyze Handoff logs
‚ñ° Verify device continuity

üíæ BACKUP AUDIT:
‚ñ° Review iTunes backups
‚ñ° Check iCloud backups
‚ñ° Verify backup integrity
‚ñ° Check backup timestamps

üìä LOG ANALYSIS:
‚ñ° Analyze device logs
‚ñ° Check for suspicious activity
‚ñ° Review system logs
‚ñ° Monitor for rootkit indicators

üõ°Ô∏è SECURITY MEASURES:
‚ñ° Enable Find My on all devices
‚ñ° Review device passcodes
‚ñ° Check Touch ID/Face ID settings
‚ñ° Verify device encryption
‚ñ° Review app permissions

‚ö†Ô∏è REMEDIATION:
‚ñ° Remove suspicious apps
‚ñ° Reset network settings if needed
‚ñ° Clear browser data
‚ñ° Update all devices to latest iOS
‚ñ° Change Apple ID password
EOF
}

# Main execution
main() {
    print_section "üö® APPLE DEVICE SECURITY AUDIT SCRIPT"
    log "Starting Apple device security audit at $TIMESTAMP"
    log "Auditing iPhone, iPad, and Apple Watch for Static Tundra rootkit spread"
    
    # Check prerequisites
    if ! check_apple_configurator; then
        log "‚ùå Apple Configurator not available - please install first"
        exit 1
    fi
    
    # Run all audits
    check_connected_devices
    audit_device_trust
    audit_icloud_sync
    audit_airdrop_history
    audit_handoff_continuity
    audit_shared_keychain
    audit_device_backups
    audit_device_logs
    create_audit_checklist
    
    # Final summary
    print_section "üîç AUDIT SUMMARY"
    log "Apple device security audit completed at $(date '+%Y-%m-%d %H:%M:%S')"
    log "Log file: $AUDIT_LOG"
    
    echo "" | tee -a "$AUDIT_LOG"
    echo "üõ°Ô∏è APPLE DEVICE AUDIT COMPLETE" | tee -a "$AUDIT_LOG"
    echo "===============================" | tee -a "$AUDIT_LOG"
    echo "" | tee -a "$AUDIT_LOG"
    echo "üìã Review audit checklist and connect devices for detailed analysis" | tee -a "$AUDIT_LOG"
    echo "‚ö†Ô∏è  Ensure all devices are updated to latest iOS version" | tee -a "$AUDIT_LOG"
    echo "‚ö†Ô∏è  Change Apple ID password and enable 2FA if not already enabled" | tee -a "$AUDIT_LOG"
    echo "‚ö†Ô∏è  Monitor devices for 24 hours for any suspicious activity" | tee -a "$AUDIT_LOG"
}

# Execute main function
main "$@"
