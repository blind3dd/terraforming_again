#cloud-config
# Kubernetes Control Plane - Ultra Secure Configuration
# This template sets up a secure Kubernetes control plane with local MySQL

hostname: kubernetes-control-plane
fqdn: kubernetes-control-plane.internal.${domain_name}

# Update system packages
package_update: true
package_upgrade: true

# Install required packages
packages:
  - docker
  - containerd
  - kubelet
  - kubeadm
  - kubectl
  - mysql-server
  - fail2ban
  - bpftool
  - libbpf-dev
  - htop
  - vim
  - curl
  - wget
  - unzip
  - git
  - net-tools
  - tcpdump
  - clang
  - llvm
  - libelf-dev
  - iptables
  - iptables-services

# Create system users
users:
  - name: k8sadmin
    groups: [wheel, docker]
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ${ssh_public_key}
    # Additional security
    lock_passwd: true
    create_home: true
    home: /home/k8sadmin

# Write configurations
write_files:
  - path: /etc/docker/daemon.json
    permissions: '0644'
    owner: root:root
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2",
        "storage-opts": [
          "overlay2.override_kernel_check=true"
        ],
        "iptables": false,
        "bridge": "none"
      }

  - path: /etc/containerd/config.toml
    permissions: '0644'
    owner: root:root
    content: |
      version = 2
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
          SystemdCgroup = true

  - path: /etc/sysctl.d/99-kubernetes.conf
    permissions: '0644'
    owner: root:root
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
      net.ipv4.conf.all.rp_filter = 1
      net.ipv4.conf.default.rp_filter = 1

  - path: /etc/fail2ban/jail.local
    permissions: '0644'
    owner: root:root
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 3
      
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/secure
      maxretry = 3

  - path: /etc/mysql/mysql.conf.d/mysqld.cnf
    permissions: '0644'
    owner: root:root
    content: |
      [mysqld]
      bind-address = 127.0.0.1
      port = 3306
      datadir = /var/lib/mysql
      socket = /var/lib/mysql/mysql.sock
      user = mysql
      pid-file = /var/run/mysqld/mysqld.pid
      
      # Security settings
      local-infile = 0
      skip-name-resolve
      max_connections = 100
      
      # Logging
      log-error = /var/log/mysql/error.log
      slow_query_log = 1
      slow_query_log_file = /var/log/mysql/slow.log
      long_query_time = 2

  - path: /etc/systemd/system/kubelet.service
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=kubelet: The Kubernetes Node Agent
      Documentation=https://kubernetes.io/docs/
      Wants=network-online.target
      After=network-online.target
      
      [Service]
      ExecStart=/usr/bin/kubelet
      Restart=always
      StartLimitInterval=0
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target

# Run commands after system setup
runcmd:
  # Enable and start services
  - systemctl enable docker
  - systemctl start docker
  - systemctl enable containerd
  - systemctl start containerd
  - systemctl enable kubelet
  - systemctl enable mysql
  - systemctl start mysql
  
  # Start and enable fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Install and enforce IMDSv2 security
  - curl -o /tmp/enforce-imdsv2.sh https://raw.githubusercontent.com/blind3dd/database_CI/main/scripts/enforce-imdsv2.sh || echo "Script not available, will create locally"
  - cp /tmp/enforce-imdsv2.sh /opt/enforce-imdsv2.sh 2>/dev/null || echo "Creating local IMDSv2 enforcement script"
  - chmod +x /opt/enforce-imdsv2.sh
  - /opt/enforce-imdsv2.sh
  
  # Configure MySQL
  - mysql -e "CREATE DATABASE IF NOT EXISTS ${rds_database};"
  - mysql -e "CREATE USER IF NOT EXISTS '${rds_username}'@'localhost' IDENTIFIED BY '${rds_password}';"
  - mysql -e "GRANT ALL PRIVILEGES ON ${rds_database}.* TO '${rds_username}'@'localhost';"
  - mysql -e "FLUSH PRIVILEGES;"
  
  # Initialize Kubernetes cluster
  - kubeadm init --pod-network-cidr=${pod_cidr} --service-cidr=${service_cidr} --apiserver-advertise-address=0.0.0.0 --apiserver-cert-extra-sans=${kubernetes_api_endpoint}
  
  # Set up kubectl for k8sadmin user
  - mkdir -p /home/k8sadmin/.kube
  - cp -i /etc/kubernetes/admin.conf /home/k8sadmin/.kube/config
  - chown k8sadmin:k8sadmin /home/k8sadmin/.kube/config
  
  # Install Calico CNI
  - kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://docs.projectcalico.org/manifests/calico.yaml
  
  # Configure eBPF-based firewall rules
  - bpftool net attach xdp dev lo /usr/local/bin/allow-local.bpf.o
  - bpftool net attach xdp dev eth0 /usr/local/bin/allow-k8s-services.bpf.o
  
  # Create eBPF firewall rules directory
  - mkdir -p /usr/local/bin
  - mkdir -p /etc/ebpf/rules
  
  # Set proper permissions
  - chmod 600 /home/k8sadmin/.kube/config
  
  # Create log directories
  - mkdir -p /var/log/kubernetes
  - mkdir -p /var/log/mysql
  
  # Restart networking
  - systemctl restart systemd-networkd
  
  # Configure DHCP and DNS for private FQDN resolution
  - echo "domain internal.${domain_name}" >> /etc/dhcp/dhclient.conf
  - echo "search internal.${domain_name} ${domain_name}" >> /etc/dhcp/dhclient.conf
  - echo "prepend domain-name-servers 169.254.169.253;" >> /etc/dhcp/dhclient.conf
  
  # Configure resolv.conf for private FQDN resolution
  - echo "domain internal.${domain_name}" > /etc/resolv.conf
  - echo "search internal.${domain_name} ${domain_name}" >> /etc/resolv.conf
  - echo "nameserver 169.254.169.253" >> /etc/resolv.conf
  - echo "nameserver 8.8.8.8" >> /etc/resolv.conf
  - echo "nameserver 8.8.4.4" >> /etc/resolv.conf
  
  # Make resolv.conf immutable to prevent DHCP from overwriting
  - chattr +i /etc/resolv.conf
  
  # Test DNS resolution
  - nslookup kubernetes-control-plane.internal.${domain_name}
  - nslookup mysql.internal.${domain_name}

# Final message
final_message: "Kubernetes Control Plane setup complete! Cluster is running with local MySQL database. Private FQDN: kubernetes-control-plane.internal.${domain_name}"
